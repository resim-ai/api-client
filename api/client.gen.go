// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	OAuthScopes = "OAuth.Scopes"
)

// Defines values for BatchStatus.
const (
	BatchStatusBATCHMETRICSQUEUED  BatchStatus = "BATCH_METRICS_QUEUED"
	BatchStatusBATCHMETRICSRUNNING BatchStatus = "BATCH_METRICS_RUNNING"
	BatchStatusCANCELLED           BatchStatus = "CANCELLED"
	BatchStatusERROR               BatchStatus = "ERROR"
	BatchStatusEXPERIENCESRUNNING  BatchStatus = "EXPERIENCES_RUNNING"
	BatchStatusSUBMITTED           BatchStatus = "SUBMITTED"
	BatchStatusSUCCEEDED           BatchStatus = "SUCCEEDED"
)

// Defines values for BranchType.
const (
	CHANGEREQUEST BranchType = "CHANGE_REQUEST"
	MAIN          BranchType = "MAIN"
	RELEASE       BranchType = "RELEASE"
)

// Defines values for ExecutionStep.
const (
	BATCHMETRICS ExecutionStep = "BATCH_METRICS"
	EXPERIENCE   ExecutionStep = "EXPERIENCE"
	METRICS      ExecutionStep = "METRICS"
)

// Defines values for JobStatus.
const (
	JobStatusCANCELLED         JobStatus = "CANCELLED"
	JobStatusERROR             JobStatus = "ERROR"
	JobStatusEXPERIENCERUNNING JobStatus = "EXPERIENCE_RUNNING"
	JobStatusMETRICSQUEUED     JobStatus = "METRICS_QUEUED"
	JobStatusMETRICSRUNNING    JobStatus = "METRICS_RUNNING"
	JobStatusSUBMITTED         JobStatus = "SUBMITTED"
	JobStatusSUCCEEDED         JobStatus = "SUCCEEDED"
)

// Defines values for LogType.
const (
	ARCHIVELOG       LogType = "ARCHIVE_LOG"
	CONTAINERLOG     LogType = "CONTAINER_LOG"
	EXECUTIONLOG     LogType = "EXECUTION_LOG"
	MCAPLOG          LogType = "MCAP_LOG"
	METRICSOUTPUTLOG LogType = "METRICS_OUTPUT_LOG"
	MP4LOG           LogType = "MP4_LOG"
	OTHERLOG         LogType = "OTHER_LOG"
)

// Defines values for MetricStatus.
const (
	FAILBLOCK        MetricStatus = "FAIL_BLOCK"
	FAILWARN         MetricStatus = "FAIL_WARN"
	NOSTATUSREPORTED MetricStatus = "NO_STATUS_REPORTED"
	NOTAPPLICABLE    MetricStatus = "NOT_APPLICABLE"
	PASSED           MetricStatus = "PASSED"
	RAW              MetricStatus = "RAW"
)

// Defines values for MetricType.
const (
	COMPOSITE MetricType = "COMPOSITE"
	SCALAR    MetricType = "SCALAR"
)

// Defines values for ObjectType.
const (
	TYPEDCURVESE3    ObjectType = "TYPE_DCURVE_SE3"
	TYPEFRAME        ObjectType = "TYPE_FRAME"
	TYPEFRAMEDVECTOR ObjectType = "TYPE_FRAMED_VECTOR"
	TYPESE3          ObjectType = "TYPE_SE3"
	TYPESO3          ObjectType = "TYPE_SO3"
	TYPETCURVESE3    ObjectType = "TYPE_TCURVE_SE3"
	TYPETRAJECTORY   ObjectType = "TYPE_TRAJECTORY"
)

// Defines values for ParameterSweepStatus.
const (
	ERROR     ParameterSweepStatus = "ERROR"
	RUNNING   ParameterSweepStatus = "RUNNING"
	SUBMITTED ParameterSweepStatus = "SUBMITTED"
	SUCCEEDED ParameterSweepStatus = "SUCCEEDED"
)

// Batch defines model for batch.
type Batch struct {
	BatchID                      *BatchID            `json:"batchID,omitempty"`
	BatchMetricsStatus           *MetricStatus       `json:"batchMetricsStatus,omitempty"`
	BuildID                      *BuildID            `json:"buildID,omitempty"`
	CreationTimestamp            *Timestamp          `json:"creationTimestamp,omitempty"`
	FriendlyName                 *FriendlyName       `json:"friendlyName,omitempty"`
	InstantiatedExperienceIDs    *[]ExperienceID     `json:"instantiatedExperienceIDs,omitempty"`
	InstantiatedExperienceTagIDs *[]ExperienceTagID  `json:"instantiatedExperienceTagIDs,omitempty"`
	JobsMetricsStatus            *MetricStatus       `json:"jobsMetricsStatus,omitempty"`
	LastUpdatedTimestamp         *Timestamp          `json:"lastUpdatedTimestamp,omitempty"`
	MetricsBuildID               *MetricsBuildID     `json:"metricsBuildID,omitempty"`
	OrgID                        *OrgID              `json:"orgID,omitempty"`
	OverallMetricsStatus         *MetricStatus       `json:"overallMetricsStatus,omitempty"`
	Parameters                   *BatchParameters    `json:"parameters,omitempty"`
	Status                       *BatchStatus        `json:"status,omitempty"`
	StatusHistory                *BatchStatusHistory `json:"statusHistory,omitempty"`
	UserID                       *UserID             `json:"userID,omitempty"`
}

// BatchID defines model for batchID.
type BatchID = openapi_types.UUID

// BatchInput defines model for batchInput.
type BatchInput struct {
	BuildID            *BuildID             `json:"buildID,omitempty"`
	ExperienceIDs      *[]ExperienceID      `json:"experienceIDs"`
	ExperienceNames    *[]ExperienceName    `json:"experienceNames"`
	ExperienceTagIDs   *[]ExperienceTagID   `json:"experienceTagIDs"`
	ExperienceTagNames *[]ExperienceTagName `json:"experienceTagNames"`
	MetricsBuildID     *MetricsBuildID      `json:"metricsBuildID,omitempty"`
	Parameters         *BatchParameters     `json:"parameters,omitempty"`
}

// BatchLog defines model for batchLog.
type BatchLog struct {
	BatchID           *BatchID       `json:"batchID,omitempty"`
	Checksum          *Checksum      `json:"checksum,omitempty"`
	CreationTimestamp *Timestamp     `json:"creationTimestamp,omitempty"`
	ExecutionStep     *ExecutionStep `json:"executionStep,omitempty"`
	FileName          *FileName      `json:"fileName,omitempty"`
	FileSize          *FileSize      `json:"fileSize,omitempty"`
	Location          *LogLocation   `json:"location,omitempty"`
	LogID             *LogID         `json:"logID,omitempty"`
	LogOutputLocation *string        `json:"logOutputLocation,omitempty"`
	LogType           *LogType       `json:"logType,omitempty"`
	OrgID             *OrgID         `json:"orgID,omitempty"`
	UserID            *UserID        `json:"userID,omitempty"`
}

// BatchMetric defines model for batchMetric.
type BatchMetric struct {
	BatchID           *BatchID         `json:"batchID,omitempty"`
	CreationTimestamp *Timestamp       `json:"creationTimestamp,omitempty"`
	DataIDs           *[]MetricsDataID `json:"dataIDs,omitempty"`
	FileLocation      *MetricLocation  `json:"fileLocation,omitempty"`
	MetricID          *MetricID        `json:"metricID,omitempty"`
	MetricURL         *MetricURL       `json:"metricURL,omitempty"`
	Name              *MetricName      `json:"name,omitempty"`
	OrgID             *OrgID           `json:"orgID,omitempty"`
	Status            *MetricStatus    `json:"status,omitempty"`
	Type              *MetricType      `json:"type,omitempty"`
	UserID            *UserID          `json:"userID,omitempty"`
	Value             *MetricValue     `json:"value"`
}

// BatchMetricsData defines model for batchMetricsData.
type BatchMetricsData struct {
	BatchID           *BatchID             `json:"batchID,omitempty"`
	CreationTimestamp *Timestamp           `json:"creationTimestamp,omitempty"`
	DataID            *MetricsDataID       `json:"dataID,omitempty"`
	FileLocation      *MetricsDataLocation `json:"fileLocation,omitempty"`
	MetricsDataURL    *MetricsDataURL      `json:"metricsDataURL,omitempty"`
	Name              *string              `json:"name,omitempty"`
	OrgID             *OrgID               `json:"orgID,omitempty"`
	UserID            *UserID              `json:"userID,omitempty"`
}

// BatchMetricsDataAndIDs defines model for batchMetricsDataAndIDs.
type BatchMetricsDataAndIDs struct {
	BatchMetricID    *MetricID         `json:"batchMetricID,omitempty"`
	BatchMetricsData *BatchMetricsData `json:"batchMetricsData,omitempty"`
}

// BatchMetricsDataToBatchMetric defines model for batchMetricsDataToBatchMetric.
type BatchMetricsDataToBatchMetric struct {
	BatchMetricID       *MetricID        `json:"batchMetricID,omitempty"`
	BatchMetricsDataIDs *[]MetricsDataID `json:"batchMetricsDataIDs,omitempty"`
}

// BatchParameters defines model for batchParameters.
type BatchParameters map[string]interface{}

// BatchStatus defines model for batchStatus.
type BatchStatus string

// BatchStatusHistory defines model for batchStatusHistory.
type BatchStatusHistory = []BatchStatusHistoryType

// BatchStatusHistoryType defines model for batchStatusHistoryType.
type BatchStatusHistoryType struct {
	Status    *BatchStatus `json:"status,omitempty"`
	UpdatedAt *Timestamp   `json:"updatedAt,omitempty"`
}

// Branch defines model for branch.
type Branch struct {
	BranchID          *BranchID   `json:"branchID,omitempty"`
	BranchType        *BranchType `json:"branchType,omitempty"`
	CreationTimestamp *Timestamp  `json:"creationTimestamp,omitempty"`
	Name              *string     `json:"name,omitempty"`
	OrgID             *OrgID      `json:"orgID,omitempty"`
	ProjectID         *ProjectID  `json:"projectID,omitempty"`
	UserID            *UserID     `json:"userID,omitempty"`
}

// BranchID defines model for branchID.
type BranchID = openapi_types.UUID

// BranchType defines model for branchType.
type BranchType string

// Build defines model for build.
type Build struct {
	BranchID          *BranchID         `json:"branchID,omitempty"`
	BuildID           *BuildID          `json:"buildID,omitempty"`
	CreationTimestamp *Timestamp        `json:"creationTimestamp,omitempty"`
	Description       *BuildDescription `json:"description,omitempty"`
	ImageUri          *BuildImageUri    `json:"imageUri,omitempty"`
	OrgID             *OrgID            `json:"orgID,omitempty"`
	ProjectID         *ProjectID        `json:"projectID,omitempty"`
	UserID            *UserID           `json:"userID,omitempty"`
	Version           *BuildVersion     `json:"version,omitempty"`
}

// BuildDescription defines model for buildDescription.
type BuildDescription = string

// BuildID defines model for buildID.
type BuildID = openapi_types.UUID

// BuildImageUri defines model for buildImageUri.
type BuildImageUri = string

// BuildVersion defines model for buildVersion.
type BuildVersion = string

// Checksum defines model for checksum.
type Checksum = string

// ExecutionStep defines model for executionStep.
type ExecutionStep string

// Experience defines model for experience.
type Experience struct {
	CreationTimestamp *Timestamp       `json:"creationTimestamp,omitempty"`
	Description       *string          `json:"description,omitempty"`
	ExperienceID      *ExperienceID    `json:"experienceID,omitempty"`
	LaunchProfileID   *LaunchProfileID `json:"launchProfileID,omitempty"`
	Location          *string          `json:"location,omitempty"`
	Name              *ExperienceName  `json:"name,omitempty"`
	OrgID             *OrgID           `json:"orgID,omitempty"`
	UserID            *UserID          `json:"userID,omitempty"`
}

// ExperienceID defines model for experienceID.
type ExperienceID = openapi_types.UUID

// ExperienceInput defines model for experienceInput.
type ExperienceInput struct {
	Experience *Experience `json:"experience,omitempty"`
	UpdateMask *UpdateMask `json:"updateMask,omitempty"`
}

// ExperienceLocation defines model for experienceLocation.
type ExperienceLocation struct {
	Location *string `json:"location,omitempty"`
}

// ExperienceLocationContents defines model for experienceLocationContents.
type ExperienceLocationContents struct {
	ObjectCount *int      `json:"objectCount,omitempty"`
	Objects     *[]string `json:"objects,omitempty"`
}

// ExperienceName defines model for experienceName.
type ExperienceName = string

// ExperienceTag defines model for experienceTag.
type ExperienceTag struct {
	CreationTimestamp *Timestamp         `json:"creationTimestamp,omitempty"`
	Description       *string            `json:"description,omitempty"`
	ExperienceTagID   *ExperienceTagID   `json:"experienceTagID,omitempty"`
	Name              *ExperienceTagName `json:"name,omitempty"`
	OrgID             *OrgID             `json:"orgID,omitempty"`
	UserID            *UserID            `json:"userID,omitempty"`
}

// ExperienceTagID defines model for experienceTagID.
type ExperienceTagID = openapi_types.UUID

// ExperienceTagInput defines model for experienceTagInput.
type ExperienceTagInput struct {
	ExperienceTag *ExperienceTag `json:"experienceTag,omitempty"`
	UpdateMask    *UpdateMask    `json:"updateMask,omitempty"`
}

// ExperienceTagName defines model for experienceTagName.
type ExperienceTagName = string

// FileName defines model for fileName.
type FileName = string

// FileSize defines model for fileSize.
type FileSize = int64

// FriendlyName defines model for friendlyName.
type FriendlyName = string

// Job defines model for job.
type Job struct {
	BuildID              *BuildID          `json:"buildID,omitempty"`
	CreationTimestamp    *Timestamp        `json:"creationTimestamp,omitempty"`
	ExperienceID         *ExperienceID     `json:"experienceID,omitempty"`
	JobID                *JobID            `json:"jobID,omitempty"`
	JobMetricsStatus     *MetricStatus     `json:"jobMetricsStatus,omitempty"`
	JobStatus            *JobStatus        `json:"jobStatus,omitempty"`
	LastUpdatedTimestamp *Timestamp        `json:"lastUpdatedTimestamp,omitempty"`
	OrgID                *OrgID            `json:"orgID,omitempty"`
	OutputLocation       *string           `json:"outputLocation,omitempty"`
	Parameters           *BatchParameters  `json:"parameters,omitempty"`
	StatusHistory        *JobStatusHistory `json:"statusHistory,omitempty"`
	UserID               *UserID           `json:"userID,omitempty"`
}

// JobID defines model for jobID.
type JobID = openapi_types.UUID

// JobLog defines model for jobLog.
type JobLog struct {
	Checksum          *Checksum      `json:"checksum,omitempty"`
	CreationTimestamp *Timestamp     `json:"creationTimestamp,omitempty"`
	ExecutionStep     *ExecutionStep `json:"executionStep,omitempty"`
	FileName          *FileName      `json:"fileName,omitempty"`
	FileSize          *FileSize      `json:"fileSize,omitempty"`
	JobID             *JobID         `json:"jobID,omitempty"`
	Location          *LogLocation   `json:"location,omitempty"`
	LogID             *LogID         `json:"logID,omitempty"`
	LogOutputLocation *string        `json:"logOutputLocation,omitempty"`
	LogType           *LogType       `json:"logType,omitempty"`
	OrgID             *OrgID         `json:"orgID,omitempty"`
	UserID            *UserID        `json:"userID,omitempty"`
}

// JobMetric defines model for jobMetric.
type JobMetric struct {
	CreationTimestamp *Timestamp       `json:"creationTimestamp,omitempty"`
	DataIDs           *[]MetricsDataID `json:"dataIDs,omitempty"`
	FileLocation      *MetricLocation  `json:"fileLocation,omitempty"`
	JobID             *JobID           `json:"jobID,omitempty"`
	MetricID          *MetricID        `json:"metricID,omitempty"`
	MetricURL         *MetricURL       `json:"metricURL,omitempty"`
	Name              *MetricName      `json:"name,omitempty"`
	OrgID             *OrgID           `json:"orgID,omitempty"`
	Status            *MetricStatus    `json:"status,omitempty"`
	Type              *MetricType      `json:"type,omitempty"`
	UserID            *UserID          `json:"userID,omitempty"`
	Value             *MetricValue     `json:"value"`
}

// JobMetricsData defines model for jobMetricsData.
type JobMetricsData struct {
	CreationTimestamp *Timestamp           `json:"creationTimestamp,omitempty"`
	DataID            *MetricsDataID       `json:"dataID,omitempty"`
	FileLocation      *MetricsDataLocation `json:"fileLocation,omitempty"`
	JobID             *JobID               `json:"jobID,omitempty"`
	MetricsDataURL    *MetricsDataURL      `json:"metricsDataURL,omitempty"`
	Name              *string              `json:"name,omitempty"`
	OrgID             *OrgID               `json:"orgID,omitempty"`
	UserID            *UserID              `json:"userID,omitempty"`
}

// JobStatus defines model for jobStatus.
type JobStatus string

// JobStatusHistory defines model for jobStatusHistory.
type JobStatusHistory = []JobStatusHistoryType

// JobStatusHistoryType defines model for jobStatusHistoryType.
type JobStatusHistoryType struct {
	Status    *JobStatus `json:"status,omitempty"`
	UpdatedAt *Timestamp `json:"updatedAt,omitempty"`
}

// LaunchProfile defines model for launchProfile.
type LaunchProfile struct {
	Gpus            *int             `json:"gpus,omitempty"`
	LaunchProfileID *LaunchProfileID `json:"launchProfileID,omitempty"`
	MemoryMib       *int             `json:"memory_mib,omitempty"`
	Name            *string          `json:"name,omitempty"`
	OrgID           *OrgID           `json:"orgID,omitempty"`
	SharedMemoryMb  *int             `json:"shared_memory_mb,omitempty"`
	UserID          *UserID          `json:"userID,omitempty"`
	Vcpus           *int             `json:"vcpus,omitempty"`
}

// LaunchProfileID defines model for launchProfileID.
type LaunchProfileID = openapi_types.UUID

// LaunchProfileInput defines model for launchProfileInput.
type LaunchProfileInput struct {
	LaunchProfile *LaunchProfile `json:"launchProfile,omitempty"`
	UpdateMask    *UpdateMask    `json:"updateMask,omitempty"`
}

// LineNumber defines model for lineNumber.
type LineNumber = int32

// ListBatchLogsOutput defines model for listBatchLogsOutput.
type ListBatchLogsOutput struct {
	Logs          *[]BatchLog `json:"logs,omitempty"`
	NextPageToken *string     `json:"nextPageToken,omitempty"`
}

// ListBatchMetricsDataForBatchMetricIDsOutput defines model for listBatchMetricsDataForBatchMetricIDsOutput.
type ListBatchMetricsDataForBatchMetricIDsOutput struct {
	BatchMetricsDataAndIDs *[]BatchMetricsDataAndIDs `json:"batchMetricsDataAndIDs,omitempty"`
	NextPageToken          *string                   `json:"nextPageToken,omitempty"`
}

// ListBatchMetricsDataOutput defines model for listBatchMetricsDataOutput.
type ListBatchMetricsDataOutput struct {
	BatchMetricsData *[]BatchMetricsData `json:"batchMetricsData,omitempty"`
	NextPageToken    *string             `json:"nextPageToken,omitempty"`
}

// ListBatchMetricsOutput defines model for listBatchMetricsOutput.
type ListBatchMetricsOutput struct {
	BatchMetrics  *[]BatchMetric `json:"batchMetrics,omitempty"`
	NextPageToken *string        `json:"nextPageToken,omitempty"`
}

// ListBatchesOutput defines model for listBatchesOutput.
type ListBatchesOutput struct {
	Batches       *[]Batch `json:"batches,omitempty"`
	NextPageToken *string  `json:"nextPageToken,omitempty"`
}

// ListBranchesOutput defines model for listBranchesOutput.
type ListBranchesOutput struct {
	Branches      *[]Branch `json:"branches,omitempty"`
	NextPageToken *string   `json:"nextPageToken,omitempty"`
}

// ListBuildsOutput defines model for listBuildsOutput.
type ListBuildsOutput struct {
	Builds        *[]Build `json:"builds,omitempty"`
	NextPageToken *string  `json:"nextPageToken,omitempty"`
}

// ListExperienceTagsOutput defines model for listExperienceTagsOutput.
type ListExperienceTagsOutput struct {
	ExperienceTags *[]ExperienceTag `json:"experienceTags,omitempty"`
	NextPageToken  *string          `json:"nextPageToken,omitempty"`
}

// ListExperiencesOutput defines model for listExperiencesOutput.
type ListExperiencesOutput struct {
	Experiences   *[]Experience `json:"experiences,omitempty"`
	NextPageToken *string       `json:"nextPageToken,omitempty"`
}

// ListJobLogsOutput defines model for listJobLogsOutput.
type ListJobLogsOutput struct {
	Logs          *[]JobLog `json:"logs,omitempty"`
	NextPageToken *string   `json:"nextPageToken,omitempty"`
}

// ListJobMetricsDataOutput defines model for listJobMetricsDataOutput.
type ListJobMetricsDataOutput struct {
	MetricsData   *[]JobMetricsData `json:"metricsData,omitempty"`
	NextPageToken *string           `json:"nextPageToken,omitempty"`
}

// ListJobMetricsOutput defines model for listJobMetricsOutput.
type ListJobMetricsOutput struct {
	Metrics       *[]JobMetric `json:"metrics,omitempty"`
	NextPageToken *string      `json:"nextPageToken,omitempty"`
}

// ListJobsOutput defines model for listJobsOutput.
type ListJobsOutput struct {
	Jobs          *[]Job  `json:"jobs,omitempty"`
	NextPageToken *string `json:"nextPageToken,omitempty"`
}

// ListLaunchProfilesOutput defines model for listLaunchProfilesOutput.
type ListLaunchProfilesOutput struct {
	LaunchProfiles *[]LaunchProfile `json:"launchProfiles,omitempty"`
	NextPageToken  *string          `json:"nextPageToken,omitempty"`
}

// ListMetricsBuildOutput defines model for listMetricsBuildOutput.
type ListMetricsBuildOutput struct {
	MetricsBuilds *[]MetricsBuild `json:"metricsBuilds,omitempty"`
	NextPageToken *string         `json:"nextPageToken,omitempty"`
}

// ListMetricsDataAndMetricIDOutput defines model for listMetricsDataAndMetricIDOutput.
type ListMetricsDataAndMetricIDOutput struct {
	MetricsDataAndIDs *[]MetricsDataAndMetricID `json:"metricsDataAndIDs,omitempty"`
	NextPageToken     *string                   `json:"nextPageToken,omitempty"`
}

// ListParameterSweepsOutput defines model for listParameterSweepsOutput.
type ListParameterSweepsOutput struct {
	NextPageToken *string           `json:"nextPageToken,omitempty"`
	Sweeps        *[]ParameterSweep `json:"sweeps,omitempty"`
}

// ListProjectsOutput defines model for listProjectsOutput.
type ListProjectsOutput struct {
	NextPageToken *string    `json:"nextPageToken,omitempty"`
	Projects      *[]Project `json:"projects,omitempty"`
}

// ListViewObjectsOutput defines model for listViewObjectsOutput.
type ListViewObjectsOutput struct {
	NextPageToken *string       `json:"nextPageToken,omitempty"`
	ViewSessions  *[]ViewObject `json:"viewSessions,omitempty"`
}

// Log defines model for log.
type Log struct {
	Checksum          *Checksum      `json:"checksum,omitempty"`
	CreationTimestamp *Timestamp     `json:"creationTimestamp,omitempty"`
	ExecutionStep     *ExecutionStep `json:"executionStep,omitempty"`
	FileName          *FileName      `json:"fileName,omitempty"`
	FileSize          *FileSize      `json:"fileSize,omitempty"`
	Location          *LogLocation   `json:"location,omitempty"`
	LogID             *LogID         `json:"logID,omitempty"`
	LogOutputLocation *string        `json:"logOutputLocation,omitempty"`
	LogType           *LogType       `json:"logType,omitempty"`
	OrgID             *OrgID         `json:"orgID,omitempty"`
	UserID            *UserID        `json:"userID,omitempty"`
}

// LogID defines model for logID.
type LogID = openapi_types.UUID

// LogLocation defines model for logLocation.
type LogLocation = string

// LogType defines model for logType.
type LogType string

// McapURL defines model for mcapURL.
type McapURL = string

// Metric defines model for metric.
type Metric struct {
	CreationTimestamp *Timestamp       `json:"creationTimestamp,omitempty"`
	DataIDs           *[]MetricsDataID `json:"dataIDs,omitempty"`
	FileLocation      *MetricLocation  `json:"fileLocation,omitempty"`
	MetricID          *MetricID        `json:"metricID,omitempty"`
	MetricURL         *MetricURL       `json:"metricURL,omitempty"`
	Name              *MetricName      `json:"name,omitempty"`
	OrgID             *OrgID           `json:"orgID,omitempty"`
	Status            *MetricStatus    `json:"status,omitempty"`
	Type              *MetricType      `json:"type,omitempty"`
	UserID            *UserID          `json:"userID,omitempty"`
	Value             *MetricValue     `json:"value"`
}

// MetricDataToMetric defines model for metricDataToMetric.
type MetricDataToMetric struct {
	MetricID       *MetricID        `json:"metricID,omitempty"`
	MetricsDataIDs *[]MetricsDataID `json:"metricsDataIDs,omitempty"`
}

// MetricID defines model for metricID.
type MetricID = openapi_types.UUID

// MetricLocation defines model for metricLocation.
type MetricLocation = string

// MetricName defines model for metricName.
type MetricName = string

// MetricStatus defines model for metricStatus.
type MetricStatus string

// MetricType defines model for metricType.
type MetricType string

// MetricURL defines model for metricURL.
type MetricURL = string

// MetricValue defines model for metricValue.
type MetricValue = float64

// MetricsBuild defines model for metricsBuild.
type MetricsBuild struct {
	CreationTimestamp *Timestamp            `json:"creationTimestamp,omitempty"`
	ImageUri          *MetricsBuildImageUri `json:"imageUri,omitempty"`
	MetricsBuildID    *MetricsBuildID       `json:"metricsBuildID,omitempty"`
	Name              *MetricsBuildName     `json:"name,omitempty"`
	OrgID             *OrgID                `json:"orgID,omitempty"`
	UserID            *UserID               `json:"userID,omitempty"`
	Version           *MetricsBuildVersion  `json:"version,omitempty"`
}

// MetricsBuildID defines model for metricsBuildID.
type MetricsBuildID = openapi_types.UUID

// MetricsBuildImageUri defines model for metricsBuildImageUri.
type MetricsBuildImageUri = string

// MetricsBuildName defines model for metricsBuildName.
type MetricsBuildName = string

// MetricsBuildVersion defines model for metricsBuildVersion.
type MetricsBuildVersion = string

// MetricsData defines model for metricsData.
type MetricsData struct {
	CreationTimestamp *Timestamp           `json:"creationTimestamp,omitempty"`
	DataID            *MetricsDataID       `json:"dataID,omitempty"`
	FileLocation      *MetricsDataLocation `json:"fileLocation,omitempty"`
	MetricsDataURL    *MetricsDataURL      `json:"metricsDataURL,omitempty"`
	Name              *string              `json:"name,omitempty"`
	OrgID             *OrgID               `json:"orgID,omitempty"`
	UserID            *UserID              `json:"userID,omitempty"`
}

// MetricsDataAndMetricID defines model for metricsDataAndMetricID.
type MetricsDataAndMetricID struct {
	MetricID    *MetricID       `json:"metricID,omitempty"`
	MetricsData *JobMetricsData `json:"metricsData,omitempty"`
}

// MetricsDataID defines model for metricsDataID.
type MetricsDataID = openapi_types.UUID

// MetricsDataLocation defines model for metricsDataLocation.
type MetricsDataLocation = string

// MetricsDataURL defines model for metricsDataURL.
type MetricsDataURL = string

// ObjectCount defines model for objectCount.
type ObjectCount = int32

// ObjectName defines model for objectName.
type ObjectName = string

// ObjectType defines model for objectType.
type ObjectType string

// OrgID defines model for orgID.
type OrgID = string

// ParameterSweep defines model for parameterSweep.
type ParameterSweep struct {
	Batches              *[]BatchID                   `json:"batches,omitempty"`
	CreationTimestamp    *Timestamp                   `json:"creationTimestamp,omitempty"`
	LastUpdatedTimestamp *Timestamp                   `json:"lastUpdatedTimestamp,omitempty"`
	Name                 *string                      `json:"name,omitempty"`
	OrgID                *OrgID                       `json:"orgID,omitempty"`
	ParameterSweepID     *ParameterSweepID            `json:"parameterSweepID,omitempty"`
	Parameters           *[]SweepParameter            `json:"parameters,omitempty"`
	Status               *ParameterSweepStatus        `json:"status,omitempty"`
	StatusHistory        *ParameterSweepStatusHistory `json:"statusHistory,omitempty"`
	UserID               *UserID                      `json:"userID,omitempty"`
}

// ParameterSweepID defines model for parameterSweepID.
type ParameterSweepID = openapi_types.UUID

// ParameterSweepInput defines model for parameterSweepInput.
type ParameterSweepInput struct {
	BuildID            *BuildID             `json:"buildID,omitempty"`
	ExperienceIDs      *[]ExperienceID      `json:"experienceIDs"`
	ExperienceNames    *[]ExperienceName    `json:"experienceNames"`
	ExperienceTagIDs   *[]ExperienceTagID   `json:"experienceTagIDs"`
	ExperienceTagNames *[]ExperienceTagName `json:"experienceTagNames"`
	MetricsBuildID     *MetricsBuildID      `json:"metricsBuildID,omitempty"`
	Parameters         *[]SweepParameter    `json:"parameters,omitempty"`
}

// ParameterSweepStatus defines model for parameterSweepStatus.
type ParameterSweepStatus string

// ParameterSweepStatusHistory defines model for parameterSweepStatusHistory.
type ParameterSweepStatusHistory = []ParameterSweepStatusHistoryType

// ParameterSweepStatusHistoryType defines model for parameterSweepStatusHistoryType.
type ParameterSweepStatusHistoryType struct {
	Status    *ParameterSweepStatus `json:"status,omitempty"`
	UpdatedAt *Timestamp            `json:"updatedAt,omitempty"`
}

// Project defines model for project.
type Project struct {
	CreationTimestamp *Timestamp `json:"creationTimestamp,omitempty"`
	Description       *string    `json:"description,omitempty"`
	Name              *string    `json:"name,omitempty"`
	OrgID             *OrgID     `json:"orgID,omitempty"`
	ProjectID         *ProjectID `json:"projectID,omitempty"`
	UserID            *UserID    `json:"userID,omitempty"`
}

// ProjectID defines model for projectID.
type ProjectID = openapi_types.UUID

// ProjectUpdateInput defines model for projectUpdateInput.
type ProjectUpdateInput struct {
	Project    *Project    `json:"project,omitempty"`
	UpdateMask *UpdateMask `json:"updateMask,omitempty"`
}

// SandboxInput defines model for sandboxInput.
type SandboxInput struct {
	OrgID  *string `json:"orgID,omitempty"`
	UserID *string `json:"userID,omitempty"`
}

// SweepParameter defines model for sweepParameter.
type SweepParameter struct {
	Name   *string   `json:"name,omitempty"`
	Values *[]string `json:"values,omitempty"`
}

// Timestamp defines model for timestamp.
type Timestamp = time.Time

// UpdateMask defines model for updateMask.
type UpdateMask = []string

// UserID defines model for userID.
type UserID = string

// ViewMetadata defines model for viewMetadata.
type ViewMetadata struct {
	FileName   *FileName   `json:"fileName,omitempty"`
	LineNumber *LineNumber `json:"lineNumber,omitempty"`
	ObjectName *ObjectName `json:"objectName,omitempty"`
	ObjectType *ObjectType `json:"objectType,omitempty"`
}

// ViewObject defines model for viewObject.
type ViewObject struct {
	FriendlyName  *FriendlyName  `json:"friendlyName,omitempty"`
	McapURL       *McapURL       `json:"mcapURL,omitempty"`
	ObjectCount   *ObjectCount   `json:"objectCount,omitempty"`
	OrgID         *OrgID         `json:"orgID,omitempty"`
	UserID        *UserID        `json:"userID,omitempty"`
	ViewSessionID *ViewSessionID `json:"viewSessionID,omitempty"`
	ViewTimestamp *Timestamp     `json:"viewTimestamp,omitempty"`
	ViewURL       *string        `json:"viewURL,omitempty"`
}

// ViewObjectAndMetadata defines model for viewObjectAndMetadata.
type ViewObjectAndMetadata struct {
	ViewMetadata *[]ViewMetadata `json:"viewMetadata,omitempty"`
	ViewObject   *ViewObject     `json:"viewObject,omitempty"`
}

// ViewSessionID defines model for viewSessionID.
type ViewSessionID = openapi_types.UUID

// ViewSessionUpdate defines model for viewSessionUpdate.
type ViewSessionUpdate struct {
	Id   *ViewSessionID `json:"id,omitempty"`
	Mcap *McapURL       `json:"mcap,omitempty"`

	// View A link to view the session.
	View *string `json:"view,omitempty"`
}

// ViewUpdateID defines model for viewUpdateID.
type ViewUpdateID = int

// OrderBy defines model for orderBy.
type OrderBy = string

// PageSize defines model for pageSize.
type PageSize = int

// PageToken defines model for pageToken.
type PageToken = string

// ListBatchesParams defines parameters for ListBatches.
type ListBatchesParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListJobsParams defines parameters for ListJobs.
type ListJobsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListJobLogsForJobParams defines parameters for ListJobLogsForJob.
type ListJobLogsForJobParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListMetricsForJobParams defines parameters for ListMetricsForJob.
type ListMetricsForJobParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListMetricsForMetricIDsParams defines parameters for ListMetricsForMetricIDs.
type ListMetricsForMetricIDsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListMetricsDataForMetricIDsParams defines parameters for ListMetricsDataForMetricIDs.
type ListMetricsDataForMetricIDsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// AddMetricsDataToMetricJSONBody defines parameters for AddMetricsDataToMetric.
type AddMetricsDataToMetricJSONBody = []MetricsDataID

// ListMetricsDataForJobParams defines parameters for ListMetricsDataForJob.
type ListMetricsDataForJobParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListMetricsDataForMetricsDataIDsParams defines parameters for ListMetricsDataForMetricsDataIDs.
type ListMetricsDataForMetricsDataIDsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListBatchLogsForBatchParams defines parameters for ListBatchLogsForBatch.
type ListBatchLogsForBatchParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListBatchMetricsParams defines parameters for ListBatchMetrics.
type ListBatchMetricsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListBatchMetricsForBatchMetricIDsParams defines parameters for ListBatchMetricsForBatchMetricIDs.
type ListBatchMetricsForBatchMetricIDsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListBatchMetricsDataForBatchMetricIDsParams defines parameters for ListBatchMetricsDataForBatchMetricIDs.
type ListBatchMetricsDataForBatchMetricIDsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// AddBatchMetricsDataToBatchMetricJSONBody defines parameters for AddBatchMetricsDataToBatchMetric.
type AddBatchMetricsDataToBatchMetricJSONBody = []MetricsDataID

// ListBatchMetricsDataParams defines parameters for ListBatchMetricsData.
type ListBatchMetricsDataParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListBatchMetricsDataForBatchMetricsDataIDsParams defines parameters for ListBatchMetricsDataForBatchMetricsDataIDs.
type ListBatchMetricsDataForBatchMetricsDataIDsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListBuildsParams defines parameters for ListBuilds.
type ListBuildsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListExperienceTagsParams defines parameters for ListExperienceTags.
type ListExperienceTagsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListExperiencesWithExperienceTagParams defines parameters for ListExperiencesWithExperienceTag.
type ListExperiencesWithExperienceTagParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListExperiencesParams defines parameters for ListExperiences.
type ListExperiencesParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListExperienceTagsForExperienceParams defines parameters for ListExperienceTagsForExperience.
type ListExperienceTagsForExperienceParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListLaunchProfilesParams defines parameters for ListLaunchProfiles.
type ListLaunchProfilesParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// ListMetricsBuildsParams defines parameters for ListMetricsBuilds.
type ListMetricsBuildsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListProjectsParams defines parameters for ListProjects.
type ListProjectsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListBranchesForProjectParams defines parameters for ListBranchesForProject.
type ListBranchesForProjectParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListBuildsForBranchesParams defines parameters for ListBuildsForBranches.
type ListBuildsForBranchesParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListBatchesForBuildsParams defines parameters for ListBatchesForBuilds.
type ListBatchesForBuildsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListParameterSweepsParams defines parameters for ListParameterSweeps.
type ListParameterSweepsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListViewSessionsParams defines parameters for ListViewSessions.
type ListViewSessionsParams struct {
	PageSize  *PageSize  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	PageToken *PageToken `form:"pageToken,omitempty" json:"pageToken,omitempty"`
	OrderBy   *OrderBy   `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// CreateBatchJSONRequestBody defines body for CreateBatch for application/json ContentType.
type CreateBatchJSONRequestBody = BatchInput

// CreateJobLogJSONRequestBody defines body for CreateJobLog for application/json ContentType.
type CreateJobLogJSONRequestBody = JobLog

// CreateMetricJSONRequestBody defines body for CreateMetric for application/json ContentType.
type CreateMetricJSONRequestBody = JobMetric

// AddMetricsDataToMetricJSONRequestBody defines body for AddMetricsDataToMetric for application/json ContentType.
type AddMetricsDataToMetricJSONRequestBody = AddMetricsDataToMetricJSONBody

// CreateMetricsDataJSONRequestBody defines body for CreateMetricsData for application/json ContentType.
type CreateMetricsDataJSONRequestBody = JobMetricsData

// UpdateJobMetricsStatusJSONRequestBody defines body for UpdateJobMetricsStatus for application/json ContentType.
type UpdateJobMetricsStatusJSONRequestBody = MetricStatus

// CreateBatchLogJSONRequestBody defines body for CreateBatchLog for application/json ContentType.
type CreateBatchLogJSONRequestBody = BatchLog

// CreateBatchMetricJSONRequestBody defines body for CreateBatchMetric for application/json ContentType.
type CreateBatchMetricJSONRequestBody = BatchMetric

// AddBatchMetricsDataToBatchMetricJSONRequestBody defines body for AddBatchMetricsDataToBatchMetric for application/json ContentType.
type AddBatchMetricsDataToBatchMetricJSONRequestBody = AddBatchMetricsDataToBatchMetricJSONBody

// CreateBatchMetricsDataJSONRequestBody defines body for CreateBatchMetricsData for application/json ContentType.
type CreateBatchMetricsDataJSONRequestBody = BatchMetricsData

// UpdateBatchMetricsStatusJSONRequestBody defines body for UpdateBatchMetricsStatus for application/json ContentType.
type UpdateBatchMetricsStatusJSONRequestBody = MetricStatus

// CreateExperienceTagJSONRequestBody defines body for CreateExperienceTag for application/json ContentType.
type CreateExperienceTagJSONRequestBody = ExperienceTag

// UpdateExperienceTagJSONRequestBody defines body for UpdateExperienceTag for application/json ContentType.
type UpdateExperienceTagJSONRequestBody = ExperienceTagInput

// CreateExperienceJSONRequestBody defines body for CreateExperience for application/json ContentType.
type CreateExperienceJSONRequestBody = Experience

// UpdateExperienceJSONRequestBody defines body for UpdateExperience for application/json ContentType.
type UpdateExperienceJSONRequestBody = ExperienceInput

// CreateLaunchProfileJSONRequestBody defines body for CreateLaunchProfile for application/json ContentType.
type CreateLaunchProfileJSONRequestBody = LaunchProfile

// UpdateLaunchProfileJSONRequestBody defines body for UpdateLaunchProfile for application/json ContentType.
type UpdateLaunchProfileJSONRequestBody = LaunchProfileInput

// CreateMetricsBuildJSONRequestBody defines body for CreateMetricsBuild for application/json ContentType.
type CreateMetricsBuildJSONRequestBody = MetricsBuild

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = Project

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody = ProjectUpdateInput

// CreateBranchForProjectJSONRequestBody defines body for CreateBranchForProject for application/json ContentType.
type CreateBranchForProjectJSONRequestBody = Branch

// CreateBuildForBranchJSONRequestBody defines body for CreateBuildForBranch for application/json ContentType.
type CreateBuildForBranchJSONRequestBody = Build

// DestroySandboxJSONRequestBody defines body for DestroySandbox for application/json ContentType.
type DestroySandboxJSONRequestBody = SandboxInput

// SetupSandboxJSONRequestBody defines body for SetupSandbox for application/json ContentType.
type SetupSandboxJSONRequestBody = SandboxInput

// CreateParameterSweepJSONRequestBody defines body for CreateParameterSweep for application/json ContentType.
type CreateParameterSweepJSONRequestBody = ParameterSweepInput

// ValidateExperienceLocationJSONRequestBody defines body for ValidateExperienceLocation for application/json ContentType.
type ValidateExperienceLocationJSONRequestBody = ExperienceLocation

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListBatches request
	ListBatches(ctx context.Context, params *ListBatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBatchWithBody request with any body
	CreateBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBatch(ctx context.Context, body CreateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBatch request
	GetBatch(ctx context.Context, batchID BatchID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelBatch request
	CancelBatch(ctx context.Context, batchID BatchID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListJobs request
	ListJobs(ctx context.Context, batchID BatchID, params *ListJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJob request
	GetJob(ctx context.Context, batchID BatchID, jobID JobID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListJobLogsForJob request
	ListJobLogsForJob(ctx context.Context, batchID BatchID, jobID JobID, params *ListJobLogsForJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateJobLogWithBody request with any body
	CreateJobLogWithBody(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateJobLog(ctx context.Context, batchID BatchID, jobID JobID, body CreateJobLogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJobLog request
	DeleteJobLog(ctx context.Context, batchID BatchID, jobID JobID, logID LogID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobLog request
	GetJobLog(ctx context.Context, batchID BatchID, jobID JobID, logID LogID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMetricsForJob request
	ListMetricsForJob(ctx context.Context, batchID BatchID, jobID JobID, params *ListMetricsForJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMetricWithBody request with any body
	CreateMetricWithBody(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMetric(ctx context.Context, batchID BatchID, jobID JobID, body CreateMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMetricsForMetricIDs request
	ListMetricsForMetricIDs(ctx context.Context, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsForMetricIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMetricsDataForMetricIDs request
	ListMetricsDataForMetricIDs(ctx context.Context, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsDataForMetricIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMetricsDataToMetricWithBody request with any body
	AddMetricsDataToMetricWithBody(ctx context.Context, batchID BatchID, jobID JobID, metricID MetricID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMetricsDataToMetric(ctx context.Context, batchID BatchID, jobID JobID, metricID MetricID, body AddMetricsDataToMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMetricsDataForJob request
	ListMetricsDataForJob(ctx context.Context, batchID BatchID, jobID JobID, params *ListMetricsDataForJobParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMetricsDataWithBody request with any body
	CreateMetricsDataWithBody(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMetricsData(ctx context.Context, batchID BatchID, jobID JobID, body CreateMetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMetricsDataForMetricsDataIDs request
	ListMetricsDataForMetricsDataIDs(ctx context.Context, batchID BatchID, jobID JobID, metricsDataID []MetricsDataID, params *ListMetricsDataForMetricsDataIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateJobMetricsStatusWithBody request with any body
	UpdateJobMetricsStatusWithBody(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateJobMetricsStatus(ctx context.Context, batchID BatchID, jobID JobID, body UpdateJobMetricsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBatchLogsForBatch request
	ListBatchLogsForBatch(ctx context.Context, batchID BatchID, params *ListBatchLogsForBatchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBatchLogWithBody request with any body
	CreateBatchLogWithBody(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBatchLog(ctx context.Context, batchID BatchID, body CreateBatchLogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBatchLog request
	DeleteBatchLog(ctx context.Context, batchID BatchID, logID LogID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBatchLog request
	GetBatchLog(ctx context.Context, batchID BatchID, logID LogID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBatchMetrics request
	ListBatchMetrics(ctx context.Context, batchID BatchID, params *ListBatchMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBatchMetricWithBody request with any body
	CreateBatchMetricWithBody(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBatchMetric(ctx context.Context, batchID BatchID, body CreateBatchMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBatchMetricsForBatchMetricIDs request
	ListBatchMetricsForBatchMetricIDs(ctx context.Context, batchID BatchID, metricID []MetricID, params *ListBatchMetricsForBatchMetricIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBatchMetricsDataForBatchMetricIDs request
	ListBatchMetricsDataForBatchMetricIDs(ctx context.Context, batchID BatchID, metricID []MetricID, params *ListBatchMetricsDataForBatchMetricIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddBatchMetricsDataToBatchMetricWithBody request with any body
	AddBatchMetricsDataToBatchMetricWithBody(ctx context.Context, batchID BatchID, metricID MetricID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddBatchMetricsDataToBatchMetric(ctx context.Context, batchID BatchID, metricID MetricID, body AddBatchMetricsDataToBatchMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBatchMetricsData request
	ListBatchMetricsData(ctx context.Context, batchID BatchID, params *ListBatchMetricsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBatchMetricsDataWithBody request with any body
	CreateBatchMetricsDataWithBody(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBatchMetricsData(ctx context.Context, batchID BatchID, body CreateBatchMetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBatchMetricsDataForBatchMetricsDataIDs request
	ListBatchMetricsDataForBatchMetricsDataIDs(ctx context.Context, batchID BatchID, metricsDataID []MetricsDataID, params *ListBatchMetricsDataForBatchMetricsDataIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBatchMetricsStatusWithBody request with any body
	UpdateBatchMetricsStatusWithBody(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBatchMetricsStatus(ctx context.Context, batchID BatchID, body UpdateBatchMetricsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBuilds request
	ListBuilds(ctx context.Context, params *ListBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBuild request
	GetBuild(ctx context.Context, buildID BuildID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExperienceTags request
	ListExperienceTags(ctx context.Context, params *ListExperienceTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateExperienceTagWithBody request with any body
	CreateExperienceTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateExperienceTag(ctx context.Context, body CreateExperienceTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteExperienceTag request
	DeleteExperienceTag(ctx context.Context, experienceTagID ExperienceTagID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperienceTag request
	GetExperienceTag(ctx context.Context, experienceTagID ExperienceTagID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateExperienceTagWithBody request with any body
	UpdateExperienceTagWithBody(ctx context.Context, experienceTagID ExperienceTagID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateExperienceTag(ctx context.Context, experienceTagID ExperienceTagID, body UpdateExperienceTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExperiencesWithExperienceTag request
	ListExperiencesWithExperienceTag(ctx context.Context, experienceTagID ExperienceTagID, params *ListExperiencesWithExperienceTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveExperienceTagFromExperience request
	RemoveExperienceTagFromExperience(ctx context.Context, experienceTagID ExperienceTagID, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddExperienceTagToExperience request
	AddExperienceTagToExperience(ctx context.Context, experienceTagID ExperienceTagID, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExperiences request
	ListExperiences(ctx context.Context, params *ListExperiencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateExperienceWithBody request with any body
	CreateExperienceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateExperience(ctx context.Context, body CreateExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteExperience request
	DeleteExperience(ctx context.Context, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperience request
	GetExperience(ctx context.Context, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateExperienceWithBody request with any body
	UpdateExperienceWithBody(ctx context.Context, experienceID ExperienceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateExperience(ctx context.Context, experienceID ExperienceID, body UpdateExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListExperienceTagsForExperience request
	ListExperienceTagsForExperience(ctx context.Context, experienceID ExperienceID, params *ListExperienceTagsForExperienceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Health request
	Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLaunchProfiles request
	ListLaunchProfiles(ctx context.Context, params *ListLaunchProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLaunchProfileWithBody request with any body
	CreateLaunchProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLaunchProfile(ctx context.Context, body CreateLaunchProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLaunchProfile request
	DeleteLaunchProfile(ctx context.Context, launchProfileID LaunchProfileID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLaunchProfile request
	GetLaunchProfile(ctx context.Context, launchProfileID LaunchProfileID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLaunchProfileWithBody request with any body
	UpdateLaunchProfileWithBody(ctx context.Context, launchProfileID LaunchProfileID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLaunchProfile(ctx context.Context, launchProfileID LaunchProfileID, body UpdateLaunchProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMetricsBuilds request
	ListMetricsBuilds(ctx context.Context, params *ListMetricsBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMetricsBuildWithBody request with any body
	CreateMetricsBuildWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMetricsBuild(ctx context.Context, body CreateMetricsBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricsBuild request
	GetMetricsBuild(ctx context.Context, metricsBuildID MetricsBuildID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjects request
	ListProjects(ctx context.Context, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectWithBody request with any body
	CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProject request
	DeleteProject(ctx context.Context, projectID ProjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProject request
	GetProject(ctx context.Context, projectID ProjectID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProjectWithBody request with any body
	UpdateProjectWithBody(ctx context.Context, projectID ProjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProject(ctx context.Context, projectID ProjectID, body UpdateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBranchesForProject request
	ListBranchesForProject(ctx context.Context, projectID ProjectID, params *ListBranchesForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBranchForProjectWithBody request with any body
	CreateBranchForProjectWithBody(ctx context.Context, projectID ProjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBranchForProject(ctx context.Context, projectID ProjectID, body CreateBranchForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBranchForProject request
	DeleteBranchForProject(ctx context.Context, projectID ProjectID, branchID BranchID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranchForProject request
	GetBranchForProject(ctx context.Context, projectID ProjectID, branchID BranchID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBuildsForBranches request
	ListBuildsForBranches(ctx context.Context, projectID ProjectID, branchID []BranchID, params *ListBuildsForBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBuildForBranchWithBody request with any body
	CreateBuildForBranchWithBody(ctx context.Context, projectID ProjectID, branchID BranchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBuildForBranch(ctx context.Context, projectID ProjectID, branchID BranchID, body CreateBuildForBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBuildForBranch request
	DeleteBuildForBranch(ctx context.Context, projectID ProjectID, branchID BranchID, buildID BuildID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBuildForBranch request
	GetBuildForBranch(ctx context.Context, projectID ProjectID, branchID BranchID, buildID BuildID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBatchesForBuilds request
	ListBatchesForBuilds(ctx context.Context, projectID ProjectID, branchID BranchID, buildID []BuildID, params *ListBatchesForBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DestroySandboxWithBody request with any body
	DestroySandboxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DestroySandbox(ctx context.Context, body DestroySandboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupSandboxWithBody request with any body
	SetupSandboxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupSandbox(ctx context.Context, body SetupSandboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListParameterSweeps request
	ListParameterSweeps(ctx context.Context, params *ListParameterSweepsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateParameterSweepWithBody request with any body
	CreateParameterSweepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateParameterSweep(ctx context.Context, body CreateParameterSweepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetParameterSweep request
	GetParameterSweep(ctx context.Context, sweepID ParameterSweepID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateExperienceLocationWithBody request with any body
	ValidateExperienceLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateExperienceLocation(ctx context.Context, body ValidateExperienceLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListViewSessions request
	ListViewSessions(ctx context.Context, params *ListViewSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateViewSession request
	CreateViewSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetViewSession request
	GetViewSession(ctx context.Context, viewSessionID ViewSessionID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateViewUpdateWithBody request with any body
	CreateViewUpdateWithBody(ctx context.Context, viewSessionID ViewSessionID, viewUpdateID ViewUpdateID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListBatches(ctx context.Context, params *ListBatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBatchesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatch(ctx context.Context, body CreateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBatch(ctx context.Context, batchID BatchID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBatchRequest(c.Server, batchID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelBatch(ctx context.Context, batchID BatchID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelBatchRequest(c.Server, batchID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJobs(ctx context.Context, batchID BatchID, params *ListJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJobsRequest(c.Server, batchID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJob(ctx context.Context, batchID BatchID, jobID JobID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobRequest(c.Server, batchID, jobID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJobLogsForJob(ctx context.Context, batchID BatchID, jobID JobID, params *ListJobLogsForJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJobLogsForJobRequest(c.Server, batchID, jobID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJobLogWithBody(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobLogRequestWithBody(c.Server, batchID, jobID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJobLog(ctx context.Context, batchID BatchID, jobID JobID, body CreateJobLogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobLogRequest(c.Server, batchID, jobID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJobLog(ctx context.Context, batchID BatchID, jobID JobID, logID LogID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobLogRequest(c.Server, batchID, jobID, logID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobLog(ctx context.Context, batchID BatchID, jobID JobID, logID LogID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobLogRequest(c.Server, batchID, jobID, logID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMetricsForJob(ctx context.Context, batchID BatchID, jobID JobID, params *ListMetricsForJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMetricsForJobRequest(c.Server, batchID, jobID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMetricWithBody(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMetricRequestWithBody(c.Server, batchID, jobID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMetric(ctx context.Context, batchID BatchID, jobID JobID, body CreateMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMetricRequest(c.Server, batchID, jobID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMetricsForMetricIDs(ctx context.Context, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsForMetricIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMetricsForMetricIDsRequest(c.Server, batchID, jobID, metricID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMetricsDataForMetricIDs(ctx context.Context, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsDataForMetricIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMetricsDataForMetricIDsRequest(c.Server, batchID, jobID, metricID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMetricsDataToMetricWithBody(ctx context.Context, batchID BatchID, jobID JobID, metricID MetricID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMetricsDataToMetricRequestWithBody(c.Server, batchID, jobID, metricID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMetricsDataToMetric(ctx context.Context, batchID BatchID, jobID JobID, metricID MetricID, body AddMetricsDataToMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMetricsDataToMetricRequest(c.Server, batchID, jobID, metricID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMetricsDataForJob(ctx context.Context, batchID BatchID, jobID JobID, params *ListMetricsDataForJobParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMetricsDataForJobRequest(c.Server, batchID, jobID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMetricsDataWithBody(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMetricsDataRequestWithBody(c.Server, batchID, jobID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMetricsData(ctx context.Context, batchID BatchID, jobID JobID, body CreateMetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMetricsDataRequest(c.Server, batchID, jobID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMetricsDataForMetricsDataIDs(ctx context.Context, batchID BatchID, jobID JobID, metricsDataID []MetricsDataID, params *ListMetricsDataForMetricsDataIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMetricsDataForMetricsDataIDsRequest(c.Server, batchID, jobID, metricsDataID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobMetricsStatusWithBody(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobMetricsStatusRequestWithBody(c.Server, batchID, jobID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateJobMetricsStatus(ctx context.Context, batchID BatchID, jobID JobID, body UpdateJobMetricsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateJobMetricsStatusRequest(c.Server, batchID, jobID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBatchLogsForBatch(ctx context.Context, batchID BatchID, params *ListBatchLogsForBatchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBatchLogsForBatchRequest(c.Server, batchID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatchLogWithBody(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchLogRequestWithBody(c.Server, batchID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatchLog(ctx context.Context, batchID BatchID, body CreateBatchLogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchLogRequest(c.Server, batchID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBatchLog(ctx context.Context, batchID BatchID, logID LogID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBatchLogRequest(c.Server, batchID, logID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBatchLog(ctx context.Context, batchID BatchID, logID LogID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBatchLogRequest(c.Server, batchID, logID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBatchMetrics(ctx context.Context, batchID BatchID, params *ListBatchMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBatchMetricsRequest(c.Server, batchID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatchMetricWithBody(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchMetricRequestWithBody(c.Server, batchID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatchMetric(ctx context.Context, batchID BatchID, body CreateBatchMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchMetricRequest(c.Server, batchID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBatchMetricsForBatchMetricIDs(ctx context.Context, batchID BatchID, metricID []MetricID, params *ListBatchMetricsForBatchMetricIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBatchMetricsForBatchMetricIDsRequest(c.Server, batchID, metricID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBatchMetricsDataForBatchMetricIDs(ctx context.Context, batchID BatchID, metricID []MetricID, params *ListBatchMetricsDataForBatchMetricIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBatchMetricsDataForBatchMetricIDsRequest(c.Server, batchID, metricID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddBatchMetricsDataToBatchMetricWithBody(ctx context.Context, batchID BatchID, metricID MetricID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddBatchMetricsDataToBatchMetricRequestWithBody(c.Server, batchID, metricID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddBatchMetricsDataToBatchMetric(ctx context.Context, batchID BatchID, metricID MetricID, body AddBatchMetricsDataToBatchMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddBatchMetricsDataToBatchMetricRequest(c.Server, batchID, metricID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBatchMetricsData(ctx context.Context, batchID BatchID, params *ListBatchMetricsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBatchMetricsDataRequest(c.Server, batchID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatchMetricsDataWithBody(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchMetricsDataRequestWithBody(c.Server, batchID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBatchMetricsData(ctx context.Context, batchID BatchID, body CreateBatchMetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBatchMetricsDataRequest(c.Server, batchID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBatchMetricsDataForBatchMetricsDataIDs(ctx context.Context, batchID BatchID, metricsDataID []MetricsDataID, params *ListBatchMetricsDataForBatchMetricsDataIDsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBatchMetricsDataForBatchMetricsDataIDsRequest(c.Server, batchID, metricsDataID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBatchMetricsStatusWithBody(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBatchMetricsStatusRequestWithBody(c.Server, batchID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBatchMetricsStatus(ctx context.Context, batchID BatchID, body UpdateBatchMetricsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBatchMetricsStatusRequest(c.Server, batchID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBuilds(ctx context.Context, params *ListBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBuildsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBuild(ctx context.Context, buildID BuildID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBuildRequest(c.Server, buildID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExperienceTags(ctx context.Context, params *ListExperienceTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExperienceTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExperienceTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExperienceTagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExperienceTag(ctx context.Context, body CreateExperienceTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExperienceTagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExperienceTag(ctx context.Context, experienceTagID ExperienceTagID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteExperienceTagRequest(c.Server, experienceTagID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperienceTag(ctx context.Context, experienceTagID ExperienceTagID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperienceTagRequest(c.Server, experienceTagID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExperienceTagWithBody(ctx context.Context, experienceTagID ExperienceTagID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExperienceTagRequestWithBody(c.Server, experienceTagID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExperienceTag(ctx context.Context, experienceTagID ExperienceTagID, body UpdateExperienceTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExperienceTagRequest(c.Server, experienceTagID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExperiencesWithExperienceTag(ctx context.Context, experienceTagID ExperienceTagID, params *ListExperiencesWithExperienceTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExperiencesWithExperienceTagRequest(c.Server, experienceTagID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveExperienceTagFromExperience(ctx context.Context, experienceTagID ExperienceTagID, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveExperienceTagFromExperienceRequest(c.Server, experienceTagID, experienceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddExperienceTagToExperience(ctx context.Context, experienceTagID ExperienceTagID, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddExperienceTagToExperienceRequest(c.Server, experienceTagID, experienceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExperiences(ctx context.Context, params *ListExperiencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExperiencesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExperienceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExperienceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateExperience(ctx context.Context, body CreateExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateExperienceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExperience(ctx context.Context, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteExperienceRequest(c.Server, experienceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperience(ctx context.Context, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperienceRequest(c.Server, experienceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExperienceWithBody(ctx context.Context, experienceID ExperienceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExperienceRequestWithBody(c.Server, experienceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateExperience(ctx context.Context, experienceID ExperienceID, body UpdateExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateExperienceRequest(c.Server, experienceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListExperienceTagsForExperience(ctx context.Context, experienceID ExperienceID, params *ListExperienceTagsForExperienceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListExperienceTagsForExperienceRequest(c.Server, experienceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLaunchProfiles(ctx context.Context, params *ListLaunchProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLaunchProfilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLaunchProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLaunchProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLaunchProfile(ctx context.Context, body CreateLaunchProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLaunchProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLaunchProfile(ctx context.Context, launchProfileID LaunchProfileID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLaunchProfileRequest(c.Server, launchProfileID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLaunchProfile(ctx context.Context, launchProfileID LaunchProfileID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLaunchProfileRequest(c.Server, launchProfileID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLaunchProfileWithBody(ctx context.Context, launchProfileID LaunchProfileID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLaunchProfileRequestWithBody(c.Server, launchProfileID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLaunchProfile(ctx context.Context, launchProfileID LaunchProfileID, body UpdateLaunchProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLaunchProfileRequest(c.Server, launchProfileID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMetricsBuilds(ctx context.Context, params *ListMetricsBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMetricsBuildsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMetricsBuildWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMetricsBuildRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMetricsBuild(ctx context.Context, body CreateMetricsBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMetricsBuildRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricsBuild(ctx context.Context, metricsBuildID MetricsBuildID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricsBuildRequest(c.Server, metricsBuildID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjects(ctx context.Context, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProject(ctx context.Context, projectID ProjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectRequest(c.Server, projectID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProject(ctx context.Context, projectID ProjectID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectRequest(c.Server, projectID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectWithBody(ctx context.Context, projectID ProjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectRequestWithBody(c.Server, projectID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProject(ctx context.Context, projectID ProjectID, body UpdateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectRequest(c.Server, projectID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBranchesForProject(ctx context.Context, projectID ProjectID, params *ListBranchesForProjectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBranchesForProjectRequest(c.Server, projectID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBranchForProjectWithBody(ctx context.Context, projectID ProjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBranchForProjectRequestWithBody(c.Server, projectID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBranchForProject(ctx context.Context, projectID ProjectID, body CreateBranchForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBranchForProjectRequest(c.Server, projectID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBranchForProject(ctx context.Context, projectID ProjectID, branchID BranchID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBranchForProjectRequest(c.Server, projectID, branchID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchForProject(ctx context.Context, projectID ProjectID, branchID BranchID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchForProjectRequest(c.Server, projectID, branchID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBuildsForBranches(ctx context.Context, projectID ProjectID, branchID []BranchID, params *ListBuildsForBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBuildsForBranchesRequest(c.Server, projectID, branchID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBuildForBranchWithBody(ctx context.Context, projectID ProjectID, branchID BranchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBuildForBranchRequestWithBody(c.Server, projectID, branchID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBuildForBranch(ctx context.Context, projectID ProjectID, branchID BranchID, body CreateBuildForBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBuildForBranchRequest(c.Server, projectID, branchID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBuildForBranch(ctx context.Context, projectID ProjectID, branchID BranchID, buildID BuildID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBuildForBranchRequest(c.Server, projectID, branchID, buildID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBuildForBranch(ctx context.Context, projectID ProjectID, branchID BranchID, buildID BuildID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBuildForBranchRequest(c.Server, projectID, branchID, buildID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBatchesForBuilds(ctx context.Context, projectID ProjectID, branchID BranchID, buildID []BuildID, params *ListBatchesForBuildsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBatchesForBuildsRequest(c.Server, projectID, branchID, buildID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DestroySandboxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestroySandboxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DestroySandbox(ctx context.Context, body DestroySandboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestroySandboxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupSandboxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupSandboxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupSandbox(ctx context.Context, body SetupSandboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupSandboxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListParameterSweeps(ctx context.Context, params *ListParameterSweepsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListParameterSweepsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateParameterSweepWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateParameterSweepRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateParameterSweep(ctx context.Context, body CreateParameterSweepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateParameterSweepRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetParameterSweep(ctx context.Context, sweepID ParameterSweepID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetParameterSweepRequest(c.Server, sweepID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateExperienceLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateExperienceLocationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateExperienceLocation(ctx context.Context, body ValidateExperienceLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateExperienceLocationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListViewSessions(ctx context.Context, params *ListViewSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListViewSessionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateViewSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateViewSessionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetViewSession(ctx context.Context, viewSessionID ViewSessionID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetViewSessionRequest(c.Server, viewSessionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateViewUpdateWithBody(ctx context.Context, viewSessionID ViewSessionID, viewUpdateID ViewUpdateID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateViewUpdateRequestWithBody(c.Server, viewSessionID, viewUpdateID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListBatchesRequest generates requests for ListBatches
func NewListBatchesRequest(server string, params *ListBatchesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBatchRequest calls the generic CreateBatch builder with application/json body
func NewCreateBatchRequest(server string, body CreateBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBatchRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBatchRequestWithBody generates requests for CreateBatch with any type of body
func NewCreateBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBatchRequest generates requests for GetBatch
func NewGetBatchRequest(server string, batchID BatchID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelBatchRequest generates requests for CancelBatch
func NewCancelBatchRequest(server string, batchID BatchID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/:cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListJobsRequest generates requests for ListJobs
func NewListJobsRequest(server string, batchID BatchID, params *ListJobsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobRequest generates requests for GetJob
func NewGetJobRequest(server string, batchID BatchID, jobID JobID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListJobLogsForJobRequest generates requests for ListJobLogsForJob
func NewListJobLogsForJobRequest(server string, batchID BatchID, jobID JobID, params *ListJobLogsForJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateJobLogRequest calls the generic CreateJobLog builder with application/json body
func NewCreateJobLogRequest(server string, batchID BatchID, jobID JobID, body CreateJobLogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateJobLogRequestWithBody(server, batchID, jobID, "application/json", bodyReader)
}

// NewCreateJobLogRequestWithBody generates requests for CreateJobLog with any type of body
func NewCreateJobLogRequestWithBody(server string, batchID BatchID, jobID JobID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJobLogRequest generates requests for DeleteJobLog
func NewDeleteJobLogRequest(server string, batchID BatchID, jobID JobID, logID LogID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "logID", runtime.ParamLocationPath, logID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/logs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobLogRequest generates requests for GetJobLog
func NewGetJobLogRequest(server string, batchID BatchID, jobID JobID, logID LogID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "logID", runtime.ParamLocationPath, logID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/logs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMetricsForJobRequest generates requests for ListMetricsForJob
func NewListMetricsForJobRequest(server string, batchID BatchID, jobID JobID, params *ListMetricsForJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/metrics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMetricRequest calls the generic CreateMetric builder with application/json body
func NewCreateMetricRequest(server string, batchID BatchID, jobID JobID, body CreateMetricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMetricRequestWithBody(server, batchID, jobID, "application/json", bodyReader)
}

// NewCreateMetricRequestWithBody generates requests for CreateMetric with any type of body
func NewCreateMetricRequestWithBody(server string, batchID BatchID, jobID JobID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/metrics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMetricsForMetricIDsRequest generates requests for ListMetricsForMetricIDs
func NewListMetricsForMetricIDsRequest(server string, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsForMetricIDsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metricID", runtime.ParamLocationPath, metricID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/metrics/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMetricsDataForMetricIDsRequest generates requests for ListMetricsDataForMetricIDs
func NewListMetricsDataForMetricIDsRequest(server string, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsDataForMetricIDsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metricID", runtime.ParamLocationPath, metricID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/metrics/%s/metricsData", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddMetricsDataToMetricRequest calls the generic AddMetricsDataToMetric builder with application/json body
func NewAddMetricsDataToMetricRequest(server string, batchID BatchID, jobID JobID, metricID MetricID, body AddMetricsDataToMetricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMetricsDataToMetricRequestWithBody(server, batchID, jobID, metricID, "application/json", bodyReader)
}

// NewAddMetricsDataToMetricRequestWithBody generates requests for AddMetricsDataToMetric with any type of body
func NewAddMetricsDataToMetricRequestWithBody(server string, batchID BatchID, jobID JobID, metricID MetricID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metricID", runtime.ParamLocationPath, metricID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/metrics/%s/metricsData", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMetricsDataForJobRequest generates requests for ListMetricsDataForJob
func NewListMetricsDataForJobRequest(server string, batchID BatchID, jobID JobID, params *ListMetricsDataForJobParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/metricsData", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMetricsDataRequest calls the generic CreateMetricsData builder with application/json body
func NewCreateMetricsDataRequest(server string, batchID BatchID, jobID JobID, body CreateMetricsDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMetricsDataRequestWithBody(server, batchID, jobID, "application/json", bodyReader)
}

// NewCreateMetricsDataRequestWithBody generates requests for CreateMetricsData with any type of body
func NewCreateMetricsDataRequestWithBody(server string, batchID BatchID, jobID JobID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/metricsData", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMetricsDataForMetricsDataIDsRequest generates requests for ListMetricsDataForMetricsDataIDs
func NewListMetricsDataForMetricsDataIDsRequest(server string, batchID BatchID, jobID JobID, metricsDataID []MetricsDataID, params *ListMetricsDataForMetricsDataIDsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "metricsDataID", runtime.ParamLocationPath, metricsDataID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/metricsData/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateJobMetricsStatusRequest calls the generic UpdateJobMetricsStatus builder with application/json body
func NewUpdateJobMetricsStatusRequest(server string, batchID BatchID, jobID JobID, body UpdateJobMetricsStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateJobMetricsStatusRequestWithBody(server, batchID, jobID, "application/json", bodyReader)
}

// NewUpdateJobMetricsStatusRequestWithBody generates requests for UpdateJobMetricsStatus with any type of body
func NewUpdateJobMetricsStatusRequestWithBody(server string, batchID BatchID, jobID JobID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/jobs/%s/metricsStatus", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListBatchLogsForBatchRequest generates requests for ListBatchLogsForBatch
func NewListBatchLogsForBatchRequest(server string, batchID BatchID, params *ListBatchLogsForBatchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBatchLogRequest calls the generic CreateBatchLog builder with application/json body
func NewCreateBatchLogRequest(server string, batchID BatchID, body CreateBatchLogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBatchLogRequestWithBody(server, batchID, "application/json", bodyReader)
}

// NewCreateBatchLogRequestWithBody generates requests for CreateBatchLog with any type of body
func NewCreateBatchLogRequestWithBody(server string, batchID BatchID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBatchLogRequest generates requests for DeleteBatchLog
func NewDeleteBatchLogRequest(server string, batchID BatchID, logID LogID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "logID", runtime.ParamLocationPath, logID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/logs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBatchLogRequest generates requests for GetBatchLog
func NewGetBatchLogRequest(server string, batchID BatchID, logID LogID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "logID", runtime.ParamLocationPath, logID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/logs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBatchMetricsRequest generates requests for ListBatchMetrics
func NewListBatchMetricsRequest(server string, batchID BatchID, params *ListBatchMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBatchMetricRequest calls the generic CreateBatchMetric builder with application/json body
func NewCreateBatchMetricRequest(server string, batchID BatchID, body CreateBatchMetricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBatchMetricRequestWithBody(server, batchID, "application/json", bodyReader)
}

// NewCreateBatchMetricRequestWithBody generates requests for CreateBatchMetric with any type of body
func NewCreateBatchMetricRequestWithBody(server string, batchID BatchID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListBatchMetricsForBatchMetricIDsRequest generates requests for ListBatchMetricsForBatchMetricIDs
func NewListBatchMetricsForBatchMetricIDsRequest(server string, batchID BatchID, metricID []MetricID, params *ListBatchMetricsForBatchMetricIDsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metricID", runtime.ParamLocationPath, metricID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/metrics/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBatchMetricsDataForBatchMetricIDsRequest generates requests for ListBatchMetricsDataForBatchMetricIDs
func NewListBatchMetricsDataForBatchMetricIDsRequest(server string, batchID BatchID, metricID []MetricID, params *ListBatchMetricsDataForBatchMetricIDsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metricID", runtime.ParamLocationPath, metricID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/metrics/%s/metricsData", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddBatchMetricsDataToBatchMetricRequest calls the generic AddBatchMetricsDataToBatchMetric builder with application/json body
func NewAddBatchMetricsDataToBatchMetricRequest(server string, batchID BatchID, metricID MetricID, body AddBatchMetricsDataToBatchMetricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddBatchMetricsDataToBatchMetricRequestWithBody(server, batchID, metricID, "application/json", bodyReader)
}

// NewAddBatchMetricsDataToBatchMetricRequestWithBody generates requests for AddBatchMetricsDataToBatchMetric with any type of body
func NewAddBatchMetricsDataToBatchMetricRequestWithBody(server string, batchID BatchID, metricID MetricID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metricID", runtime.ParamLocationPath, metricID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/metrics/%s/metricsData", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListBatchMetricsDataRequest generates requests for ListBatchMetricsData
func NewListBatchMetricsDataRequest(server string, batchID BatchID, params *ListBatchMetricsDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/metricsData", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBatchMetricsDataRequest calls the generic CreateBatchMetricsData builder with application/json body
func NewCreateBatchMetricsDataRequest(server string, batchID BatchID, body CreateBatchMetricsDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBatchMetricsDataRequestWithBody(server, batchID, "application/json", bodyReader)
}

// NewCreateBatchMetricsDataRequestWithBody generates requests for CreateBatchMetricsData with any type of body
func NewCreateBatchMetricsDataRequestWithBody(server string, batchID BatchID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/metricsData", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListBatchMetricsDataForBatchMetricsDataIDsRequest generates requests for ListBatchMetricsDataForBatchMetricsDataIDs
func NewListBatchMetricsDataForBatchMetricsDataIDsRequest(server string, batchID BatchID, metricsDataID []MetricsDataID, params *ListBatchMetricsDataForBatchMetricsDataIDsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metricsDataID", runtime.ParamLocationPath, metricsDataID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/metricsData/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateBatchMetricsStatusRequest calls the generic UpdateBatchMetricsStatus builder with application/json body
func NewUpdateBatchMetricsStatusRequest(server string, batchID BatchID, body UpdateBatchMetricsStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBatchMetricsStatusRequestWithBody(server, batchID, "application/json", bodyReader)
}

// NewUpdateBatchMetricsStatusRequestWithBody generates requests for UpdateBatchMetricsStatus with any type of body
func NewUpdateBatchMetricsStatusRequestWithBody(server string, batchID BatchID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "batchID", runtime.ParamLocationPath, batchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/batches/%s/metricsStatus", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListBuildsRequest generates requests for ListBuilds
func NewListBuildsRequest(server string, params *ListBuildsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/builds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBuildRequest generates requests for GetBuild
func NewGetBuildRequest(server string, buildID BuildID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "buildID", runtime.ParamLocationPath, buildID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/builds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExperienceTagsRequest generates requests for ListExperienceTags
func NewListExperienceTagsRequest(server string, params *ListExperienceTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experienceTags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateExperienceTagRequest calls the generic CreateExperienceTag builder with application/json body
func NewCreateExperienceTagRequest(server string, body CreateExperienceTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateExperienceTagRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateExperienceTagRequestWithBody generates requests for CreateExperienceTag with any type of body
func NewCreateExperienceTagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experienceTags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteExperienceTagRequest generates requests for DeleteExperienceTag
func NewDeleteExperienceTagRequest(server string, experienceTagID ExperienceTagID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceTagID", runtime.ParamLocationPath, experienceTagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experienceTags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExperienceTagRequest generates requests for GetExperienceTag
func NewGetExperienceTagRequest(server string, experienceTagID ExperienceTagID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceTagID", runtime.ParamLocationPath, experienceTagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experienceTags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateExperienceTagRequest calls the generic UpdateExperienceTag builder with application/json body
func NewUpdateExperienceTagRequest(server string, experienceTagID ExperienceTagID, body UpdateExperienceTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateExperienceTagRequestWithBody(server, experienceTagID, "application/json", bodyReader)
}

// NewUpdateExperienceTagRequestWithBody generates requests for UpdateExperienceTag with any type of body
func NewUpdateExperienceTagRequestWithBody(server string, experienceTagID ExperienceTagID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceTagID", runtime.ParamLocationPath, experienceTagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experienceTags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListExperiencesWithExperienceTagRequest generates requests for ListExperiencesWithExperienceTag
func NewListExperiencesWithExperienceTagRequest(server string, experienceTagID ExperienceTagID, params *ListExperiencesWithExperienceTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceTagID", runtime.ParamLocationPath, experienceTagID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experienceTags/%s/experiences", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveExperienceTagFromExperienceRequest generates requests for RemoveExperienceTagFromExperience
func NewRemoveExperienceTagFromExperienceRequest(server string, experienceTagID ExperienceTagID, experienceID ExperienceID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceTagID", runtime.ParamLocationPath, experienceTagID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experienceID", runtime.ParamLocationPath, experienceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experienceTags/%s/experiences/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddExperienceTagToExperienceRequest generates requests for AddExperienceTagToExperience
func NewAddExperienceTagToExperienceRequest(server string, experienceTagID ExperienceTagID, experienceID ExperienceID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceTagID", runtime.ParamLocationPath, experienceTagID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "experienceID", runtime.ParamLocationPath, experienceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experienceTags/%s/experiences/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListExperiencesRequest generates requests for ListExperiences
func NewListExperiencesRequest(server string, params *ListExperiencesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateExperienceRequest calls the generic CreateExperience builder with application/json body
func NewCreateExperienceRequest(server string, body CreateExperienceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateExperienceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateExperienceRequestWithBody generates requests for CreateExperience with any type of body
func NewCreateExperienceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteExperienceRequest generates requests for DeleteExperience
func NewDeleteExperienceRequest(server string, experienceID ExperienceID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceID", runtime.ParamLocationPath, experienceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExperienceRequest generates requests for GetExperience
func NewGetExperienceRequest(server string, experienceID ExperienceID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceID", runtime.ParamLocationPath, experienceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateExperienceRequest calls the generic UpdateExperience builder with application/json body
func NewUpdateExperienceRequest(server string, experienceID ExperienceID, body UpdateExperienceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateExperienceRequestWithBody(server, experienceID, "application/json", bodyReader)
}

// NewUpdateExperienceRequestWithBody generates requests for UpdateExperience with any type of body
func NewUpdateExperienceRequestWithBody(server string, experienceID ExperienceID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceID", runtime.ParamLocationPath, experienceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListExperienceTagsForExperienceRequest generates requests for ListExperienceTagsForExperience
func NewListExperienceTagsForExperienceRequest(server string, experienceID ExperienceID, params *ListExperienceTagsForExperienceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "experienceID", runtime.ParamLocationPath, experienceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiences/%s/experienceTags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthRequest generates requests for Health
func NewHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLaunchProfilesRequest generates requests for ListLaunchProfiles
func NewListLaunchProfilesRequest(server string, params *ListLaunchProfilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/launchProfiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLaunchProfileRequest calls the generic CreateLaunchProfile builder with application/json body
func NewCreateLaunchProfileRequest(server string, body CreateLaunchProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLaunchProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateLaunchProfileRequestWithBody generates requests for CreateLaunchProfile with any type of body
func NewCreateLaunchProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/launchProfiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLaunchProfileRequest generates requests for DeleteLaunchProfile
func NewDeleteLaunchProfileRequest(server string, launchProfileID LaunchProfileID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "launchProfileID", runtime.ParamLocationPath, launchProfileID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/launchProfiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLaunchProfileRequest generates requests for GetLaunchProfile
func NewGetLaunchProfileRequest(server string, launchProfileID LaunchProfileID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "launchProfileID", runtime.ParamLocationPath, launchProfileID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/launchProfiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLaunchProfileRequest calls the generic UpdateLaunchProfile builder with application/json body
func NewUpdateLaunchProfileRequest(server string, launchProfileID LaunchProfileID, body UpdateLaunchProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLaunchProfileRequestWithBody(server, launchProfileID, "application/json", bodyReader)
}

// NewUpdateLaunchProfileRequestWithBody generates requests for UpdateLaunchProfile with any type of body
func NewUpdateLaunchProfileRequestWithBody(server string, launchProfileID LaunchProfileID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "launchProfileID", runtime.ParamLocationPath, launchProfileID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/launchProfiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMetricsBuildsRequest generates requests for ListMetricsBuilds
func NewListMetricsBuildsRequest(server string, params *ListMetricsBuildsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metricsBuilds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMetricsBuildRequest calls the generic CreateMetricsBuild builder with application/json body
func NewCreateMetricsBuildRequest(server string, body CreateMetricsBuildJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMetricsBuildRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMetricsBuildRequestWithBody generates requests for CreateMetricsBuild with any type of body
func NewCreateMetricsBuildRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metricsBuilds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMetricsBuildRequest generates requests for GetMetricsBuild
func NewGetMetricsBuildRequest(server string, metricsBuildID MetricsBuildID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "metricsBuildID", runtime.ParamLocationPath, metricsBuildID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metricsBuilds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProjectsRequest generates requests for ListProjects
func NewListProjectsRequest(server string, params *ListProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectRequest calls the generic CreateProject builder with application/json body
func NewCreateProjectRequest(server string, body CreateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProjectRequestWithBody generates requests for CreateProject with any type of body
func NewCreateProjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectRequest generates requests for DeleteProject
func NewDeleteProjectRequest(server string, projectID ProjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectRequest generates requests for GetProject
func NewGetProjectRequest(server string, projectID ProjectID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProjectRequest calls the generic UpdateProject builder with application/json body
func NewUpdateProjectRequest(server string, projectID ProjectID, body UpdateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProjectRequestWithBody(server, projectID, "application/json", bodyReader)
}

// NewUpdateProjectRequestWithBody generates requests for UpdateProject with any type of body
func NewUpdateProjectRequestWithBody(server string, projectID ProjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListBranchesForProjectRequest generates requests for ListBranchesForProject
func NewListBranchesForProjectRequest(server string, projectID ProjectID, params *ListBranchesForProjectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/branches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBranchForProjectRequest calls the generic CreateBranchForProject builder with application/json body
func NewCreateBranchForProjectRequest(server string, projectID ProjectID, body CreateBranchForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBranchForProjectRequestWithBody(server, projectID, "application/json", bodyReader)
}

// NewCreateBranchForProjectRequestWithBody generates requests for CreateBranchForProject with any type of body
func NewCreateBranchForProjectRequestWithBody(server string, projectID ProjectID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/branches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBranchForProjectRequest generates requests for DeleteBranchForProject
func NewDeleteBranchForProjectRequest(server string, projectID ProjectID, branchID BranchID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branchID", runtime.ParamLocationPath, branchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/branches/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBranchForProjectRequest generates requests for GetBranchForProject
func NewGetBranchForProjectRequest(server string, projectID ProjectID, branchID BranchID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branchID", runtime.ParamLocationPath, branchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/branches/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBuildsForBranchesRequest generates requests for ListBuildsForBranches
func NewListBuildsForBranchesRequest(server string, projectID ProjectID, branchID []BranchID, params *ListBuildsForBranchesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branchID", runtime.ParamLocationPath, branchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/branches/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBuildForBranchRequest calls the generic CreateBuildForBranch builder with application/json body
func NewCreateBuildForBranchRequest(server string, projectID ProjectID, branchID BranchID, body CreateBuildForBranchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBuildForBranchRequestWithBody(server, projectID, branchID, "application/json", bodyReader)
}

// NewCreateBuildForBranchRequestWithBody generates requests for CreateBuildForBranch with any type of body
func NewCreateBuildForBranchRequestWithBody(server string, projectID ProjectID, branchID BranchID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branchID", runtime.ParamLocationPath, branchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/branches/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBuildForBranchRequest generates requests for DeleteBuildForBranch
func NewDeleteBuildForBranchRequest(server string, projectID ProjectID, branchID BranchID, buildID BuildID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branchID", runtime.ParamLocationPath, branchID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "buildID", runtime.ParamLocationPath, buildID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/branches/%s/builds/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBuildForBranchRequest generates requests for GetBuildForBranch
func NewGetBuildForBranchRequest(server string, projectID ProjectID, branchID BranchID, buildID BuildID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branchID", runtime.ParamLocationPath, branchID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "buildID", runtime.ParamLocationPath, buildID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/branches/%s/builds/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBatchesForBuildsRequest generates requests for ListBatchesForBuilds
func NewListBatchesForBuildsRequest(server string, projectID ProjectID, branchID BranchID, buildID []BuildID, params *ListBatchesForBuildsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "branchID", runtime.ParamLocationPath, branchID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "buildID", runtime.ParamLocationPath, buildID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/branches/%s/builds/%s/batches", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDestroySandboxRequest calls the generic DestroySandbox builder with application/json body
func NewDestroySandboxRequest(server string, body DestroySandboxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDestroySandboxRequestWithBody(server, "application/json", bodyReader)
}

// NewDestroySandboxRequestWithBody generates requests for DestroySandbox with any type of body
func NewDestroySandboxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sandbox/:destroy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetupSandboxRequest calls the generic SetupSandbox builder with application/json body
func NewSetupSandboxRequest(server string, body SetupSandboxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupSandboxRequestWithBody(server, "application/json", bodyReader)
}

// NewSetupSandboxRequestWithBody generates requests for SetupSandbox with any type of body
func NewSetupSandboxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sandbox/:setup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListParameterSweepsRequest generates requests for ListParameterSweeps
func NewListParameterSweepsRequest(server string, params *ListParameterSweepsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sweeps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateParameterSweepRequest calls the generic CreateParameterSweep builder with application/json body
func NewCreateParameterSweepRequest(server string, body CreateParameterSweepJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateParameterSweepRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateParameterSweepRequestWithBody generates requests for CreateParameterSweep with any type of body
func NewCreateParameterSweepRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sweeps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetParameterSweepRequest generates requests for GetParameterSweep
func NewGetParameterSweepRequest(server string, sweepID ParameterSweepID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sweepID", runtime.ParamLocationPath, sweepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sweeps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateExperienceLocationRequest calls the generic ValidateExperienceLocation builder with application/json body
func NewValidateExperienceLocationRequest(server string, body ValidateExperienceLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateExperienceLocationRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateExperienceLocationRequestWithBody generates requests for ValidateExperienceLocation with any type of body
func NewValidateExperienceLocationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/validateExperienceLocation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListViewSessionsRequest generates requests for ListViewSessions
func NewListViewSessionsRequest(server string, params *ListViewSessionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/view/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageToken", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateViewSessionRequest generates requests for CreateViewSession
func NewCreateViewSessionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/view/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetViewSessionRequest generates requests for GetViewSession
func NewGetViewSessionRequest(server string, viewSessionID ViewSessionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "viewSessionID", runtime.ParamLocationPath, viewSessionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/view/sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateViewUpdateRequestWithBody generates requests for CreateViewUpdate with any type of body
func NewCreateViewUpdateRequestWithBody(server string, viewSessionID ViewSessionID, viewUpdateID ViewUpdateID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "viewSessionID", runtime.ParamLocationPath, viewSessionID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "viewUpdateID", runtime.ParamLocationPath, viewUpdateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/view/sessions/%s/updates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListBatchesWithResponse request
	ListBatchesWithResponse(ctx context.Context, params *ListBatchesParams, reqEditors ...RequestEditorFn) (*ListBatchesResponse, error)

	// CreateBatchWithBodyWithResponse request with any body
	CreateBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchResponse, error)

	CreateBatchWithResponse(ctx context.Context, body CreateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchResponse, error)

	// GetBatchWithResponse request
	GetBatchWithResponse(ctx context.Context, batchID BatchID, reqEditors ...RequestEditorFn) (*GetBatchResponse, error)

	// CancelBatchWithResponse request
	CancelBatchWithResponse(ctx context.Context, batchID BatchID, reqEditors ...RequestEditorFn) (*CancelBatchResponse, error)

	// ListJobsWithResponse request
	ListJobsWithResponse(ctx context.Context, batchID BatchID, params *ListJobsParams, reqEditors ...RequestEditorFn) (*ListJobsResponse, error)

	// GetJobWithResponse request
	GetJobWithResponse(ctx context.Context, batchID BatchID, jobID JobID, reqEditors ...RequestEditorFn) (*GetJobResponse, error)

	// ListJobLogsForJobWithResponse request
	ListJobLogsForJobWithResponse(ctx context.Context, batchID BatchID, jobID JobID, params *ListJobLogsForJobParams, reqEditors ...RequestEditorFn) (*ListJobLogsForJobResponse, error)

	// CreateJobLogWithBodyWithResponse request with any body
	CreateJobLogWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobLogResponse, error)

	CreateJobLogWithResponse(ctx context.Context, batchID BatchID, jobID JobID, body CreateJobLogJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobLogResponse, error)

	// DeleteJobLogWithResponse request
	DeleteJobLogWithResponse(ctx context.Context, batchID BatchID, jobID JobID, logID LogID, reqEditors ...RequestEditorFn) (*DeleteJobLogResponse, error)

	// GetJobLogWithResponse request
	GetJobLogWithResponse(ctx context.Context, batchID BatchID, jobID JobID, logID LogID, reqEditors ...RequestEditorFn) (*GetJobLogResponse, error)

	// ListMetricsForJobWithResponse request
	ListMetricsForJobWithResponse(ctx context.Context, batchID BatchID, jobID JobID, params *ListMetricsForJobParams, reqEditors ...RequestEditorFn) (*ListMetricsForJobResponse, error)

	// CreateMetricWithBodyWithResponse request with any body
	CreateMetricWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMetricResponse, error)

	CreateMetricWithResponse(ctx context.Context, batchID BatchID, jobID JobID, body CreateMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMetricResponse, error)

	// ListMetricsForMetricIDsWithResponse request
	ListMetricsForMetricIDsWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsForMetricIDsParams, reqEditors ...RequestEditorFn) (*ListMetricsForMetricIDsResponse, error)

	// ListMetricsDataForMetricIDsWithResponse request
	ListMetricsDataForMetricIDsWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsDataForMetricIDsParams, reqEditors ...RequestEditorFn) (*ListMetricsDataForMetricIDsResponse, error)

	// AddMetricsDataToMetricWithBodyWithResponse request with any body
	AddMetricsDataToMetricWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricID MetricID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMetricsDataToMetricResponse, error)

	AddMetricsDataToMetricWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricID MetricID, body AddMetricsDataToMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMetricsDataToMetricResponse, error)

	// ListMetricsDataForJobWithResponse request
	ListMetricsDataForJobWithResponse(ctx context.Context, batchID BatchID, jobID JobID, params *ListMetricsDataForJobParams, reqEditors ...RequestEditorFn) (*ListMetricsDataForJobResponse, error)

	// CreateMetricsDataWithBodyWithResponse request with any body
	CreateMetricsDataWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMetricsDataResponse, error)

	CreateMetricsDataWithResponse(ctx context.Context, batchID BatchID, jobID JobID, body CreateMetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMetricsDataResponse, error)

	// ListMetricsDataForMetricsDataIDsWithResponse request
	ListMetricsDataForMetricsDataIDsWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricsDataID []MetricsDataID, params *ListMetricsDataForMetricsDataIDsParams, reqEditors ...RequestEditorFn) (*ListMetricsDataForMetricsDataIDsResponse, error)

	// UpdateJobMetricsStatusWithBodyWithResponse request with any body
	UpdateJobMetricsStatusWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobMetricsStatusResponse, error)

	UpdateJobMetricsStatusWithResponse(ctx context.Context, batchID BatchID, jobID JobID, body UpdateJobMetricsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobMetricsStatusResponse, error)

	// ListBatchLogsForBatchWithResponse request
	ListBatchLogsForBatchWithResponse(ctx context.Context, batchID BatchID, params *ListBatchLogsForBatchParams, reqEditors ...RequestEditorFn) (*ListBatchLogsForBatchResponse, error)

	// CreateBatchLogWithBodyWithResponse request with any body
	CreateBatchLogWithBodyWithResponse(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchLogResponse, error)

	CreateBatchLogWithResponse(ctx context.Context, batchID BatchID, body CreateBatchLogJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchLogResponse, error)

	// DeleteBatchLogWithResponse request
	DeleteBatchLogWithResponse(ctx context.Context, batchID BatchID, logID LogID, reqEditors ...RequestEditorFn) (*DeleteBatchLogResponse, error)

	// GetBatchLogWithResponse request
	GetBatchLogWithResponse(ctx context.Context, batchID BatchID, logID LogID, reqEditors ...RequestEditorFn) (*GetBatchLogResponse, error)

	// ListBatchMetricsWithResponse request
	ListBatchMetricsWithResponse(ctx context.Context, batchID BatchID, params *ListBatchMetricsParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsResponse, error)

	// CreateBatchMetricWithBodyWithResponse request with any body
	CreateBatchMetricWithBodyWithResponse(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchMetricResponse, error)

	CreateBatchMetricWithResponse(ctx context.Context, batchID BatchID, body CreateBatchMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchMetricResponse, error)

	// ListBatchMetricsForBatchMetricIDsWithResponse request
	ListBatchMetricsForBatchMetricIDsWithResponse(ctx context.Context, batchID BatchID, metricID []MetricID, params *ListBatchMetricsForBatchMetricIDsParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsForBatchMetricIDsResponse, error)

	// ListBatchMetricsDataForBatchMetricIDsWithResponse request
	ListBatchMetricsDataForBatchMetricIDsWithResponse(ctx context.Context, batchID BatchID, metricID []MetricID, params *ListBatchMetricsDataForBatchMetricIDsParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsDataForBatchMetricIDsResponse, error)

	// AddBatchMetricsDataToBatchMetricWithBodyWithResponse request with any body
	AddBatchMetricsDataToBatchMetricWithBodyWithResponse(ctx context.Context, batchID BatchID, metricID MetricID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddBatchMetricsDataToBatchMetricResponse, error)

	AddBatchMetricsDataToBatchMetricWithResponse(ctx context.Context, batchID BatchID, metricID MetricID, body AddBatchMetricsDataToBatchMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*AddBatchMetricsDataToBatchMetricResponse, error)

	// ListBatchMetricsDataWithResponse request
	ListBatchMetricsDataWithResponse(ctx context.Context, batchID BatchID, params *ListBatchMetricsDataParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsDataResponse, error)

	// CreateBatchMetricsDataWithBodyWithResponse request with any body
	CreateBatchMetricsDataWithBodyWithResponse(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchMetricsDataResponse, error)

	CreateBatchMetricsDataWithResponse(ctx context.Context, batchID BatchID, body CreateBatchMetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchMetricsDataResponse, error)

	// ListBatchMetricsDataForBatchMetricsDataIDsWithResponse request
	ListBatchMetricsDataForBatchMetricsDataIDsWithResponse(ctx context.Context, batchID BatchID, metricsDataID []MetricsDataID, params *ListBatchMetricsDataForBatchMetricsDataIDsParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsDataForBatchMetricsDataIDsResponse, error)

	// UpdateBatchMetricsStatusWithBodyWithResponse request with any body
	UpdateBatchMetricsStatusWithBodyWithResponse(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBatchMetricsStatusResponse, error)

	UpdateBatchMetricsStatusWithResponse(ctx context.Context, batchID BatchID, body UpdateBatchMetricsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBatchMetricsStatusResponse, error)

	// ListBuildsWithResponse request
	ListBuildsWithResponse(ctx context.Context, params *ListBuildsParams, reqEditors ...RequestEditorFn) (*ListBuildsResponse, error)

	// GetBuildWithResponse request
	GetBuildWithResponse(ctx context.Context, buildID BuildID, reqEditors ...RequestEditorFn) (*GetBuildResponse, error)

	// ListExperienceTagsWithResponse request
	ListExperienceTagsWithResponse(ctx context.Context, params *ListExperienceTagsParams, reqEditors ...RequestEditorFn) (*ListExperienceTagsResponse, error)

	// CreateExperienceTagWithBodyWithResponse request with any body
	CreateExperienceTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExperienceTagResponse, error)

	CreateExperienceTagWithResponse(ctx context.Context, body CreateExperienceTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExperienceTagResponse, error)

	// DeleteExperienceTagWithResponse request
	DeleteExperienceTagWithResponse(ctx context.Context, experienceTagID ExperienceTagID, reqEditors ...RequestEditorFn) (*DeleteExperienceTagResponse, error)

	// GetExperienceTagWithResponse request
	GetExperienceTagWithResponse(ctx context.Context, experienceTagID ExperienceTagID, reqEditors ...RequestEditorFn) (*GetExperienceTagResponse, error)

	// UpdateExperienceTagWithBodyWithResponse request with any body
	UpdateExperienceTagWithBodyWithResponse(ctx context.Context, experienceTagID ExperienceTagID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExperienceTagResponse, error)

	UpdateExperienceTagWithResponse(ctx context.Context, experienceTagID ExperienceTagID, body UpdateExperienceTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExperienceTagResponse, error)

	// ListExperiencesWithExperienceTagWithResponse request
	ListExperiencesWithExperienceTagWithResponse(ctx context.Context, experienceTagID ExperienceTagID, params *ListExperiencesWithExperienceTagParams, reqEditors ...RequestEditorFn) (*ListExperiencesWithExperienceTagResponse, error)

	// RemoveExperienceTagFromExperienceWithResponse request
	RemoveExperienceTagFromExperienceWithResponse(ctx context.Context, experienceTagID ExperienceTagID, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*RemoveExperienceTagFromExperienceResponse, error)

	// AddExperienceTagToExperienceWithResponse request
	AddExperienceTagToExperienceWithResponse(ctx context.Context, experienceTagID ExperienceTagID, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*AddExperienceTagToExperienceResponse, error)

	// ListExperiencesWithResponse request
	ListExperiencesWithResponse(ctx context.Context, params *ListExperiencesParams, reqEditors ...RequestEditorFn) (*ListExperiencesResponse, error)

	// CreateExperienceWithBodyWithResponse request with any body
	CreateExperienceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExperienceResponse, error)

	CreateExperienceWithResponse(ctx context.Context, body CreateExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExperienceResponse, error)

	// DeleteExperienceWithResponse request
	DeleteExperienceWithResponse(ctx context.Context, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*DeleteExperienceResponse, error)

	// GetExperienceWithResponse request
	GetExperienceWithResponse(ctx context.Context, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*GetExperienceResponse, error)

	// UpdateExperienceWithBodyWithResponse request with any body
	UpdateExperienceWithBodyWithResponse(ctx context.Context, experienceID ExperienceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExperienceResponse, error)

	UpdateExperienceWithResponse(ctx context.Context, experienceID ExperienceID, body UpdateExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExperienceResponse, error)

	// ListExperienceTagsForExperienceWithResponse request
	ListExperienceTagsForExperienceWithResponse(ctx context.Context, experienceID ExperienceID, params *ListExperienceTagsForExperienceParams, reqEditors ...RequestEditorFn) (*ListExperienceTagsForExperienceResponse, error)

	// HealthWithResponse request
	HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error)

	// ListLaunchProfilesWithResponse request
	ListLaunchProfilesWithResponse(ctx context.Context, params *ListLaunchProfilesParams, reqEditors ...RequestEditorFn) (*ListLaunchProfilesResponse, error)

	// CreateLaunchProfileWithBodyWithResponse request with any body
	CreateLaunchProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLaunchProfileResponse, error)

	CreateLaunchProfileWithResponse(ctx context.Context, body CreateLaunchProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLaunchProfileResponse, error)

	// DeleteLaunchProfileWithResponse request
	DeleteLaunchProfileWithResponse(ctx context.Context, launchProfileID LaunchProfileID, reqEditors ...RequestEditorFn) (*DeleteLaunchProfileResponse, error)

	// GetLaunchProfileWithResponse request
	GetLaunchProfileWithResponse(ctx context.Context, launchProfileID LaunchProfileID, reqEditors ...RequestEditorFn) (*GetLaunchProfileResponse, error)

	// UpdateLaunchProfileWithBodyWithResponse request with any body
	UpdateLaunchProfileWithBodyWithResponse(ctx context.Context, launchProfileID LaunchProfileID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLaunchProfileResponse, error)

	UpdateLaunchProfileWithResponse(ctx context.Context, launchProfileID LaunchProfileID, body UpdateLaunchProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLaunchProfileResponse, error)

	// ListMetricsBuildsWithResponse request
	ListMetricsBuildsWithResponse(ctx context.Context, params *ListMetricsBuildsParams, reqEditors ...RequestEditorFn) (*ListMetricsBuildsResponse, error)

	// CreateMetricsBuildWithBodyWithResponse request with any body
	CreateMetricsBuildWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMetricsBuildResponse, error)

	CreateMetricsBuildWithResponse(ctx context.Context, body CreateMetricsBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMetricsBuildResponse, error)

	// GetMetricsBuildWithResponse request
	GetMetricsBuildWithResponse(ctx context.Context, metricsBuildID MetricsBuildID, reqEditors ...RequestEditorFn) (*GetMetricsBuildResponse, error)

	// ListProjectsWithResponse request
	ListProjectsWithResponse(ctx context.Context, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*ListProjectsResponse, error)

	// CreateProjectWithBodyWithResponse request with any body
	CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	// DeleteProjectWithResponse request
	DeleteProjectWithResponse(ctx context.Context, projectID ProjectID, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error)

	// GetProjectWithResponse request
	GetProjectWithResponse(ctx context.Context, projectID ProjectID, reqEditors ...RequestEditorFn) (*GetProjectResponse, error)

	// UpdateProjectWithBodyWithResponse request with any body
	UpdateProjectWithBodyWithResponse(ctx context.Context, projectID ProjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectResponse, error)

	UpdateProjectWithResponse(ctx context.Context, projectID ProjectID, body UpdateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectResponse, error)

	// ListBranchesForProjectWithResponse request
	ListBranchesForProjectWithResponse(ctx context.Context, projectID ProjectID, params *ListBranchesForProjectParams, reqEditors ...RequestEditorFn) (*ListBranchesForProjectResponse, error)

	// CreateBranchForProjectWithBodyWithResponse request with any body
	CreateBranchForProjectWithBodyWithResponse(ctx context.Context, projectID ProjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBranchForProjectResponse, error)

	CreateBranchForProjectWithResponse(ctx context.Context, projectID ProjectID, body CreateBranchForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBranchForProjectResponse, error)

	// DeleteBranchForProjectWithResponse request
	DeleteBranchForProjectWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, reqEditors ...RequestEditorFn) (*DeleteBranchForProjectResponse, error)

	// GetBranchForProjectWithResponse request
	GetBranchForProjectWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, reqEditors ...RequestEditorFn) (*GetBranchForProjectResponse, error)

	// ListBuildsForBranchesWithResponse request
	ListBuildsForBranchesWithResponse(ctx context.Context, projectID ProjectID, branchID []BranchID, params *ListBuildsForBranchesParams, reqEditors ...RequestEditorFn) (*ListBuildsForBranchesResponse, error)

	// CreateBuildForBranchWithBodyWithResponse request with any body
	CreateBuildForBranchWithBodyWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBuildForBranchResponse, error)

	CreateBuildForBranchWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, body CreateBuildForBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBuildForBranchResponse, error)

	// DeleteBuildForBranchWithResponse request
	DeleteBuildForBranchWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, buildID BuildID, reqEditors ...RequestEditorFn) (*DeleteBuildForBranchResponse, error)

	// GetBuildForBranchWithResponse request
	GetBuildForBranchWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, buildID BuildID, reqEditors ...RequestEditorFn) (*GetBuildForBranchResponse, error)

	// ListBatchesForBuildsWithResponse request
	ListBatchesForBuildsWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, buildID []BuildID, params *ListBatchesForBuildsParams, reqEditors ...RequestEditorFn) (*ListBatchesForBuildsResponse, error)

	// DestroySandboxWithBodyWithResponse request with any body
	DestroySandboxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DestroySandboxResponse, error)

	DestroySandboxWithResponse(ctx context.Context, body DestroySandboxJSONRequestBody, reqEditors ...RequestEditorFn) (*DestroySandboxResponse, error)

	// SetupSandboxWithBodyWithResponse request with any body
	SetupSandboxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupSandboxResponse, error)

	SetupSandboxWithResponse(ctx context.Context, body SetupSandboxJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupSandboxResponse, error)

	// ListParameterSweepsWithResponse request
	ListParameterSweepsWithResponse(ctx context.Context, params *ListParameterSweepsParams, reqEditors ...RequestEditorFn) (*ListParameterSweepsResponse, error)

	// CreateParameterSweepWithBodyWithResponse request with any body
	CreateParameterSweepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateParameterSweepResponse, error)

	CreateParameterSweepWithResponse(ctx context.Context, body CreateParameterSweepJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateParameterSweepResponse, error)

	// GetParameterSweepWithResponse request
	GetParameterSweepWithResponse(ctx context.Context, sweepID ParameterSweepID, reqEditors ...RequestEditorFn) (*GetParameterSweepResponse, error)

	// ValidateExperienceLocationWithBodyWithResponse request with any body
	ValidateExperienceLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateExperienceLocationResponse, error)

	ValidateExperienceLocationWithResponse(ctx context.Context, body ValidateExperienceLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateExperienceLocationResponse, error)

	// ListViewSessionsWithResponse request
	ListViewSessionsWithResponse(ctx context.Context, params *ListViewSessionsParams, reqEditors ...RequestEditorFn) (*ListViewSessionsResponse, error)

	// CreateViewSessionWithResponse request
	CreateViewSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateViewSessionResponse, error)

	// GetViewSessionWithResponse request
	GetViewSessionWithResponse(ctx context.Context, viewSessionID ViewSessionID, reqEditors ...RequestEditorFn) (*GetViewSessionResponse, error)

	// CreateViewUpdateWithBodyWithResponse request with any body
	CreateViewUpdateWithBodyWithResponse(ctx context.Context, viewSessionID ViewSessionID, viewUpdateID ViewUpdateID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateViewUpdateResponse, error)
}

type ListBatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBatchesOutput
}

// Status returns HTTPResponse.Status
func (r ListBatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Batch
}

// Status returns HTTPResponse.Status
func (r CreateBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Batch
}

// Status returns HTTPResponse.Status
func (r GetBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListJobsOutput
}

// Status returns HTTPResponse.Status
func (r ListJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
}

// Status returns HTTPResponse.Status
func (r GetJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListJobLogsForJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListJobLogsOutput
}

// Status returns HTTPResponse.Status
func (r ListJobLogsForJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJobLogsForJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateJobLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobLog
}

// Status returns HTTPResponse.Status
func (r CreateJobLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJobLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteJobLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobLog
}

// Status returns HTTPResponse.Status
func (r GetJobLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMetricsForJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListJobMetricsOutput
}

// Status returns HTTPResponse.Status
func (r ListMetricsForJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMetricsForJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobMetric
}

// Status returns HTTPResponse.Status
func (r CreateMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMetricsForMetricIDsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListJobMetricsOutput
}

// Status returns HTTPResponse.Status
func (r ListMetricsForMetricIDsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMetricsForMetricIDsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMetricsDataForMetricIDsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListMetricsDataAndMetricIDOutput
}

// Status returns HTTPResponse.Status
func (r ListMetricsDataForMetricIDsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMetricsDataForMetricIDsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMetricsDataToMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MetricDataToMetric
}

// Status returns HTTPResponse.Status
func (r AddMetricsDataToMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMetricsDataToMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMetricsDataForJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListJobMetricsDataOutput
}

// Status returns HTTPResponse.Status
func (r ListMetricsDataForJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMetricsDataForJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMetricsDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *JobMetricsData
}

// Status returns HTTPResponse.Status
func (r CreateMetricsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMetricsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMetricsDataForMetricsDataIDsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListJobMetricsDataOutput
}

// Status returns HTTPResponse.Status
func (r ListMetricsDataForMetricsDataIDsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMetricsDataForMetricsDataIDsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateJobMetricsStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Job
}

// Status returns HTTPResponse.Status
func (r UpdateJobMetricsStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateJobMetricsStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBatchLogsForBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBatchLogsOutput
}

// Status returns HTTPResponse.Status
func (r ListBatchLogsForBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBatchLogsForBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBatchLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchLog
}

// Status returns HTTPResponse.Status
func (r CreateBatchLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBatchLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBatchLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBatchLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBatchLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBatchLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchLog
}

// Status returns HTTPResponse.Status
func (r GetBatchLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBatchLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBatchMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBatchMetricsOutput
}

// Status returns HTTPResponse.Status
func (r ListBatchMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBatchMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBatchMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchMetric
}

// Status returns HTTPResponse.Status
func (r CreateBatchMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBatchMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBatchMetricsForBatchMetricIDsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBatchMetricsOutput
}

// Status returns HTTPResponse.Status
func (r ListBatchMetricsForBatchMetricIDsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBatchMetricsForBatchMetricIDsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBatchMetricsDataForBatchMetricIDsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBatchMetricsDataForBatchMetricIDsOutput
}

// Status returns HTTPResponse.Status
func (r ListBatchMetricsDataForBatchMetricIDsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBatchMetricsDataForBatchMetricIDsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddBatchMetricsDataToBatchMetricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchMetricsDataToBatchMetric
}

// Status returns HTTPResponse.Status
func (r AddBatchMetricsDataToBatchMetricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddBatchMetricsDataToBatchMetricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBatchMetricsDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBatchMetricsDataOutput
}

// Status returns HTTPResponse.Status
func (r ListBatchMetricsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBatchMetricsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBatchMetricsDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchMetricsData
}

// Status returns HTTPResponse.Status
func (r CreateBatchMetricsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBatchMetricsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBatchMetricsDataForBatchMetricsDataIDsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBatchMetricsDataOutput
}

// Status returns HTTPResponse.Status
func (r ListBatchMetricsDataForBatchMetricsDataIDsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBatchMetricsDataForBatchMetricsDataIDsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBatchMetricsStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Batch
}

// Status returns HTTPResponse.Status
func (r UpdateBatchMetricsStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBatchMetricsStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBuildsOutput
}

// Status returns HTTPResponse.Status
func (r ListBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Build
}

// Status returns HTTPResponse.Status
func (r GetBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExperienceTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExperienceTagsOutput
}

// Status returns HTTPResponse.Status
func (r ListExperienceTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExperienceTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateExperienceTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExperienceTag
}

// Status returns HTTPResponse.Status
func (r CreateExperienceTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateExperienceTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExperienceTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteExperienceTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExperienceTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperienceTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperienceTag
}

// Status returns HTTPResponse.Status
func (r GetExperienceTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperienceTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateExperienceTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperienceTag
}

// Status returns HTTPResponse.Status
func (r UpdateExperienceTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateExperienceTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExperiencesWithExperienceTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExperiencesOutput
}

// Status returns HTTPResponse.Status
func (r ListExperiencesWithExperienceTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExperiencesWithExperienceTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveExperienceTagFromExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveExperienceTagFromExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveExperienceTagFromExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddExperienceTagToExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddExperienceTagToExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddExperienceTagToExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExperiencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExperiencesOutput
}

// Status returns HTTPResponse.Status
func (r ListExperiencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExperiencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Experience
}

// Status returns HTTPResponse.Status
func (r CreateExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Experience
}

// Status returns HTTPResponse.Status
func (r GetExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Experience
}

// Status returns HTTPResponse.Status
func (r UpdateExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListExperienceTagsForExperienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListExperienceTagsOutput
}

// Status returns HTTPResponse.Status
func (r ListExperienceTagsForExperienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListExperienceTagsForExperienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLaunchProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListLaunchProfilesOutput
}

// Status returns HTTPResponse.Status
func (r ListLaunchProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLaunchProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLaunchProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LaunchProfile
}

// Status returns HTTPResponse.Status
func (r CreateLaunchProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLaunchProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLaunchProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteLaunchProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLaunchProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLaunchProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LaunchProfile
}

// Status returns HTTPResponse.Status
func (r GetLaunchProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLaunchProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLaunchProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LaunchProfile
}

// Status returns HTTPResponse.Status
func (r UpdateLaunchProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLaunchProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMetricsBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListMetricsBuildOutput
}

// Status returns HTTPResponse.Status
func (r ListMetricsBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMetricsBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMetricsBuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MetricsBuild
}

// Status returns HTTPResponse.Status
func (r CreateMetricsBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMetricsBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricsBuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetricsBuild
}

// Status returns HTTPResponse.Status
func (r GetMetricsBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricsBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProjectsOutput
}

// Status returns HTTPResponse.Status
func (r ListProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
}

// Status returns HTTPResponse.Status
func (r CreateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r GetProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r UpdateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBranchesForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBranchesOutput
}

// Status returns HTTPResponse.Status
func (r ListBranchesForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBranchesForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBranchForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Branch
}

// Status returns HTTPResponse.Status
func (r CreateBranchForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBranchForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBranchForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBranchForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBranchForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Branch
}

// Status returns HTTPResponse.Status
func (r GetBranchForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBuildsForBranchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBuildsOutput
}

// Status returns HTTPResponse.Status
func (r ListBuildsForBranchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBuildsForBranchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBuildForBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Build
}

// Status returns HTTPResponse.Status
func (r CreateBuildForBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBuildForBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBuildForBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBuildForBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBuildForBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBuildForBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Build
}

// Status returns HTTPResponse.Status
func (r GetBuildForBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBuildForBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBatchesForBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBatchesOutput
}

// Status returns HTTPResponse.Status
func (r ListBatchesForBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBatchesForBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroySandboxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DestroySandboxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroySandboxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetupSandboxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetupSandboxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupSandboxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListParameterSweepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListParameterSweepsOutput
}

// Status returns HTTPResponse.Status
func (r ListParameterSweepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListParameterSweepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateParameterSweepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ParameterSweep
}

// Status returns HTTPResponse.Status
func (r CreateParameterSweepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateParameterSweepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetParameterSweepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParameterSweep
}

// Status returns HTTPResponse.Status
func (r GetParameterSweepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetParameterSweepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateExperienceLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExperienceLocationContents
}

// Status returns HTTPResponse.Status
func (r ValidateExperienceLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateExperienceLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListViewSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListViewObjectsOutput
}

// Status returns HTTPResponse.Status
func (r ListViewSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListViewSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateViewSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ViewSessionID
}

// Status returns HTTPResponse.Status
func (r CreateViewSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateViewSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetViewSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ViewObjectAndMetadata
}

// Status returns HTTPResponse.Status
func (r GetViewSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetViewSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateViewUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ViewSessionUpdate
}

// Status returns HTTPResponse.Status
func (r CreateViewUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateViewUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListBatchesWithResponse request returning *ListBatchesResponse
func (c *ClientWithResponses) ListBatchesWithResponse(ctx context.Context, params *ListBatchesParams, reqEditors ...RequestEditorFn) (*ListBatchesResponse, error) {
	rsp, err := c.ListBatches(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBatchesResponse(rsp)
}

// CreateBatchWithBodyWithResponse request with arbitrary body returning *CreateBatchResponse
func (c *ClientWithResponses) CreateBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchResponse, error) {
	rsp, err := c.CreateBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchResponse(rsp)
}

func (c *ClientWithResponses) CreateBatchWithResponse(ctx context.Context, body CreateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchResponse, error) {
	rsp, err := c.CreateBatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchResponse(rsp)
}

// GetBatchWithResponse request returning *GetBatchResponse
func (c *ClientWithResponses) GetBatchWithResponse(ctx context.Context, batchID BatchID, reqEditors ...RequestEditorFn) (*GetBatchResponse, error) {
	rsp, err := c.GetBatch(ctx, batchID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBatchResponse(rsp)
}

// CancelBatchWithResponse request returning *CancelBatchResponse
func (c *ClientWithResponses) CancelBatchWithResponse(ctx context.Context, batchID BatchID, reqEditors ...RequestEditorFn) (*CancelBatchResponse, error) {
	rsp, err := c.CancelBatch(ctx, batchID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelBatchResponse(rsp)
}

// ListJobsWithResponse request returning *ListJobsResponse
func (c *ClientWithResponses) ListJobsWithResponse(ctx context.Context, batchID BatchID, params *ListJobsParams, reqEditors ...RequestEditorFn) (*ListJobsResponse, error) {
	rsp, err := c.ListJobs(ctx, batchID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJobsResponse(rsp)
}

// GetJobWithResponse request returning *GetJobResponse
func (c *ClientWithResponses) GetJobWithResponse(ctx context.Context, batchID BatchID, jobID JobID, reqEditors ...RequestEditorFn) (*GetJobResponse, error) {
	rsp, err := c.GetJob(ctx, batchID, jobID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobResponse(rsp)
}

// ListJobLogsForJobWithResponse request returning *ListJobLogsForJobResponse
func (c *ClientWithResponses) ListJobLogsForJobWithResponse(ctx context.Context, batchID BatchID, jobID JobID, params *ListJobLogsForJobParams, reqEditors ...RequestEditorFn) (*ListJobLogsForJobResponse, error) {
	rsp, err := c.ListJobLogsForJob(ctx, batchID, jobID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJobLogsForJobResponse(rsp)
}

// CreateJobLogWithBodyWithResponse request with arbitrary body returning *CreateJobLogResponse
func (c *ClientWithResponses) CreateJobLogWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobLogResponse, error) {
	rsp, err := c.CreateJobLogWithBody(ctx, batchID, jobID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobLogResponse(rsp)
}

func (c *ClientWithResponses) CreateJobLogWithResponse(ctx context.Context, batchID BatchID, jobID JobID, body CreateJobLogJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobLogResponse, error) {
	rsp, err := c.CreateJobLog(ctx, batchID, jobID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobLogResponse(rsp)
}

// DeleteJobLogWithResponse request returning *DeleteJobLogResponse
func (c *ClientWithResponses) DeleteJobLogWithResponse(ctx context.Context, batchID BatchID, jobID JobID, logID LogID, reqEditors ...RequestEditorFn) (*DeleteJobLogResponse, error) {
	rsp, err := c.DeleteJobLog(ctx, batchID, jobID, logID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobLogResponse(rsp)
}

// GetJobLogWithResponse request returning *GetJobLogResponse
func (c *ClientWithResponses) GetJobLogWithResponse(ctx context.Context, batchID BatchID, jobID JobID, logID LogID, reqEditors ...RequestEditorFn) (*GetJobLogResponse, error) {
	rsp, err := c.GetJobLog(ctx, batchID, jobID, logID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobLogResponse(rsp)
}

// ListMetricsForJobWithResponse request returning *ListMetricsForJobResponse
func (c *ClientWithResponses) ListMetricsForJobWithResponse(ctx context.Context, batchID BatchID, jobID JobID, params *ListMetricsForJobParams, reqEditors ...RequestEditorFn) (*ListMetricsForJobResponse, error) {
	rsp, err := c.ListMetricsForJob(ctx, batchID, jobID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMetricsForJobResponse(rsp)
}

// CreateMetricWithBodyWithResponse request with arbitrary body returning *CreateMetricResponse
func (c *ClientWithResponses) CreateMetricWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMetricResponse, error) {
	rsp, err := c.CreateMetricWithBody(ctx, batchID, jobID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMetricResponse(rsp)
}

func (c *ClientWithResponses) CreateMetricWithResponse(ctx context.Context, batchID BatchID, jobID JobID, body CreateMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMetricResponse, error) {
	rsp, err := c.CreateMetric(ctx, batchID, jobID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMetricResponse(rsp)
}

// ListMetricsForMetricIDsWithResponse request returning *ListMetricsForMetricIDsResponse
func (c *ClientWithResponses) ListMetricsForMetricIDsWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsForMetricIDsParams, reqEditors ...RequestEditorFn) (*ListMetricsForMetricIDsResponse, error) {
	rsp, err := c.ListMetricsForMetricIDs(ctx, batchID, jobID, metricID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMetricsForMetricIDsResponse(rsp)
}

// ListMetricsDataForMetricIDsWithResponse request returning *ListMetricsDataForMetricIDsResponse
func (c *ClientWithResponses) ListMetricsDataForMetricIDsWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricID []MetricID, params *ListMetricsDataForMetricIDsParams, reqEditors ...RequestEditorFn) (*ListMetricsDataForMetricIDsResponse, error) {
	rsp, err := c.ListMetricsDataForMetricIDs(ctx, batchID, jobID, metricID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMetricsDataForMetricIDsResponse(rsp)
}

// AddMetricsDataToMetricWithBodyWithResponse request with arbitrary body returning *AddMetricsDataToMetricResponse
func (c *ClientWithResponses) AddMetricsDataToMetricWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricID MetricID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMetricsDataToMetricResponse, error) {
	rsp, err := c.AddMetricsDataToMetricWithBody(ctx, batchID, jobID, metricID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMetricsDataToMetricResponse(rsp)
}

func (c *ClientWithResponses) AddMetricsDataToMetricWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricID MetricID, body AddMetricsDataToMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMetricsDataToMetricResponse, error) {
	rsp, err := c.AddMetricsDataToMetric(ctx, batchID, jobID, metricID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMetricsDataToMetricResponse(rsp)
}

// ListMetricsDataForJobWithResponse request returning *ListMetricsDataForJobResponse
func (c *ClientWithResponses) ListMetricsDataForJobWithResponse(ctx context.Context, batchID BatchID, jobID JobID, params *ListMetricsDataForJobParams, reqEditors ...RequestEditorFn) (*ListMetricsDataForJobResponse, error) {
	rsp, err := c.ListMetricsDataForJob(ctx, batchID, jobID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMetricsDataForJobResponse(rsp)
}

// CreateMetricsDataWithBodyWithResponse request with arbitrary body returning *CreateMetricsDataResponse
func (c *ClientWithResponses) CreateMetricsDataWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMetricsDataResponse, error) {
	rsp, err := c.CreateMetricsDataWithBody(ctx, batchID, jobID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMetricsDataResponse(rsp)
}

func (c *ClientWithResponses) CreateMetricsDataWithResponse(ctx context.Context, batchID BatchID, jobID JobID, body CreateMetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMetricsDataResponse, error) {
	rsp, err := c.CreateMetricsData(ctx, batchID, jobID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMetricsDataResponse(rsp)
}

// ListMetricsDataForMetricsDataIDsWithResponse request returning *ListMetricsDataForMetricsDataIDsResponse
func (c *ClientWithResponses) ListMetricsDataForMetricsDataIDsWithResponse(ctx context.Context, batchID BatchID, jobID JobID, metricsDataID []MetricsDataID, params *ListMetricsDataForMetricsDataIDsParams, reqEditors ...RequestEditorFn) (*ListMetricsDataForMetricsDataIDsResponse, error) {
	rsp, err := c.ListMetricsDataForMetricsDataIDs(ctx, batchID, jobID, metricsDataID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMetricsDataForMetricsDataIDsResponse(rsp)
}

// UpdateJobMetricsStatusWithBodyWithResponse request with arbitrary body returning *UpdateJobMetricsStatusResponse
func (c *ClientWithResponses) UpdateJobMetricsStatusWithBodyWithResponse(ctx context.Context, batchID BatchID, jobID JobID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateJobMetricsStatusResponse, error) {
	rsp, err := c.UpdateJobMetricsStatusWithBody(ctx, batchID, jobID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobMetricsStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateJobMetricsStatusWithResponse(ctx context.Context, batchID BatchID, jobID JobID, body UpdateJobMetricsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateJobMetricsStatusResponse, error) {
	rsp, err := c.UpdateJobMetricsStatus(ctx, batchID, jobID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateJobMetricsStatusResponse(rsp)
}

// ListBatchLogsForBatchWithResponse request returning *ListBatchLogsForBatchResponse
func (c *ClientWithResponses) ListBatchLogsForBatchWithResponse(ctx context.Context, batchID BatchID, params *ListBatchLogsForBatchParams, reqEditors ...RequestEditorFn) (*ListBatchLogsForBatchResponse, error) {
	rsp, err := c.ListBatchLogsForBatch(ctx, batchID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBatchLogsForBatchResponse(rsp)
}

// CreateBatchLogWithBodyWithResponse request with arbitrary body returning *CreateBatchLogResponse
func (c *ClientWithResponses) CreateBatchLogWithBodyWithResponse(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchLogResponse, error) {
	rsp, err := c.CreateBatchLogWithBody(ctx, batchID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchLogResponse(rsp)
}

func (c *ClientWithResponses) CreateBatchLogWithResponse(ctx context.Context, batchID BatchID, body CreateBatchLogJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchLogResponse, error) {
	rsp, err := c.CreateBatchLog(ctx, batchID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchLogResponse(rsp)
}

// DeleteBatchLogWithResponse request returning *DeleteBatchLogResponse
func (c *ClientWithResponses) DeleteBatchLogWithResponse(ctx context.Context, batchID BatchID, logID LogID, reqEditors ...RequestEditorFn) (*DeleteBatchLogResponse, error) {
	rsp, err := c.DeleteBatchLog(ctx, batchID, logID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBatchLogResponse(rsp)
}

// GetBatchLogWithResponse request returning *GetBatchLogResponse
func (c *ClientWithResponses) GetBatchLogWithResponse(ctx context.Context, batchID BatchID, logID LogID, reqEditors ...RequestEditorFn) (*GetBatchLogResponse, error) {
	rsp, err := c.GetBatchLog(ctx, batchID, logID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBatchLogResponse(rsp)
}

// ListBatchMetricsWithResponse request returning *ListBatchMetricsResponse
func (c *ClientWithResponses) ListBatchMetricsWithResponse(ctx context.Context, batchID BatchID, params *ListBatchMetricsParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsResponse, error) {
	rsp, err := c.ListBatchMetrics(ctx, batchID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBatchMetricsResponse(rsp)
}

// CreateBatchMetricWithBodyWithResponse request with arbitrary body returning *CreateBatchMetricResponse
func (c *ClientWithResponses) CreateBatchMetricWithBodyWithResponse(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchMetricResponse, error) {
	rsp, err := c.CreateBatchMetricWithBody(ctx, batchID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchMetricResponse(rsp)
}

func (c *ClientWithResponses) CreateBatchMetricWithResponse(ctx context.Context, batchID BatchID, body CreateBatchMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchMetricResponse, error) {
	rsp, err := c.CreateBatchMetric(ctx, batchID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchMetricResponse(rsp)
}

// ListBatchMetricsForBatchMetricIDsWithResponse request returning *ListBatchMetricsForBatchMetricIDsResponse
func (c *ClientWithResponses) ListBatchMetricsForBatchMetricIDsWithResponse(ctx context.Context, batchID BatchID, metricID []MetricID, params *ListBatchMetricsForBatchMetricIDsParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsForBatchMetricIDsResponse, error) {
	rsp, err := c.ListBatchMetricsForBatchMetricIDs(ctx, batchID, metricID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBatchMetricsForBatchMetricIDsResponse(rsp)
}

// ListBatchMetricsDataForBatchMetricIDsWithResponse request returning *ListBatchMetricsDataForBatchMetricIDsResponse
func (c *ClientWithResponses) ListBatchMetricsDataForBatchMetricIDsWithResponse(ctx context.Context, batchID BatchID, metricID []MetricID, params *ListBatchMetricsDataForBatchMetricIDsParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsDataForBatchMetricIDsResponse, error) {
	rsp, err := c.ListBatchMetricsDataForBatchMetricIDs(ctx, batchID, metricID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBatchMetricsDataForBatchMetricIDsResponse(rsp)
}

// AddBatchMetricsDataToBatchMetricWithBodyWithResponse request with arbitrary body returning *AddBatchMetricsDataToBatchMetricResponse
func (c *ClientWithResponses) AddBatchMetricsDataToBatchMetricWithBodyWithResponse(ctx context.Context, batchID BatchID, metricID MetricID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddBatchMetricsDataToBatchMetricResponse, error) {
	rsp, err := c.AddBatchMetricsDataToBatchMetricWithBody(ctx, batchID, metricID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddBatchMetricsDataToBatchMetricResponse(rsp)
}

func (c *ClientWithResponses) AddBatchMetricsDataToBatchMetricWithResponse(ctx context.Context, batchID BatchID, metricID MetricID, body AddBatchMetricsDataToBatchMetricJSONRequestBody, reqEditors ...RequestEditorFn) (*AddBatchMetricsDataToBatchMetricResponse, error) {
	rsp, err := c.AddBatchMetricsDataToBatchMetric(ctx, batchID, metricID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddBatchMetricsDataToBatchMetricResponse(rsp)
}

// ListBatchMetricsDataWithResponse request returning *ListBatchMetricsDataResponse
func (c *ClientWithResponses) ListBatchMetricsDataWithResponse(ctx context.Context, batchID BatchID, params *ListBatchMetricsDataParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsDataResponse, error) {
	rsp, err := c.ListBatchMetricsData(ctx, batchID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBatchMetricsDataResponse(rsp)
}

// CreateBatchMetricsDataWithBodyWithResponse request with arbitrary body returning *CreateBatchMetricsDataResponse
func (c *ClientWithResponses) CreateBatchMetricsDataWithBodyWithResponse(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBatchMetricsDataResponse, error) {
	rsp, err := c.CreateBatchMetricsDataWithBody(ctx, batchID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchMetricsDataResponse(rsp)
}

func (c *ClientWithResponses) CreateBatchMetricsDataWithResponse(ctx context.Context, batchID BatchID, body CreateBatchMetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBatchMetricsDataResponse, error) {
	rsp, err := c.CreateBatchMetricsData(ctx, batchID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBatchMetricsDataResponse(rsp)
}

// ListBatchMetricsDataForBatchMetricsDataIDsWithResponse request returning *ListBatchMetricsDataForBatchMetricsDataIDsResponse
func (c *ClientWithResponses) ListBatchMetricsDataForBatchMetricsDataIDsWithResponse(ctx context.Context, batchID BatchID, metricsDataID []MetricsDataID, params *ListBatchMetricsDataForBatchMetricsDataIDsParams, reqEditors ...RequestEditorFn) (*ListBatchMetricsDataForBatchMetricsDataIDsResponse, error) {
	rsp, err := c.ListBatchMetricsDataForBatchMetricsDataIDs(ctx, batchID, metricsDataID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBatchMetricsDataForBatchMetricsDataIDsResponse(rsp)
}

// UpdateBatchMetricsStatusWithBodyWithResponse request with arbitrary body returning *UpdateBatchMetricsStatusResponse
func (c *ClientWithResponses) UpdateBatchMetricsStatusWithBodyWithResponse(ctx context.Context, batchID BatchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBatchMetricsStatusResponse, error) {
	rsp, err := c.UpdateBatchMetricsStatusWithBody(ctx, batchID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBatchMetricsStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateBatchMetricsStatusWithResponse(ctx context.Context, batchID BatchID, body UpdateBatchMetricsStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBatchMetricsStatusResponse, error) {
	rsp, err := c.UpdateBatchMetricsStatus(ctx, batchID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBatchMetricsStatusResponse(rsp)
}

// ListBuildsWithResponse request returning *ListBuildsResponse
func (c *ClientWithResponses) ListBuildsWithResponse(ctx context.Context, params *ListBuildsParams, reqEditors ...RequestEditorFn) (*ListBuildsResponse, error) {
	rsp, err := c.ListBuilds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBuildsResponse(rsp)
}

// GetBuildWithResponse request returning *GetBuildResponse
func (c *ClientWithResponses) GetBuildWithResponse(ctx context.Context, buildID BuildID, reqEditors ...RequestEditorFn) (*GetBuildResponse, error) {
	rsp, err := c.GetBuild(ctx, buildID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBuildResponse(rsp)
}

// ListExperienceTagsWithResponse request returning *ListExperienceTagsResponse
func (c *ClientWithResponses) ListExperienceTagsWithResponse(ctx context.Context, params *ListExperienceTagsParams, reqEditors ...RequestEditorFn) (*ListExperienceTagsResponse, error) {
	rsp, err := c.ListExperienceTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExperienceTagsResponse(rsp)
}

// CreateExperienceTagWithBodyWithResponse request with arbitrary body returning *CreateExperienceTagResponse
func (c *ClientWithResponses) CreateExperienceTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExperienceTagResponse, error) {
	rsp, err := c.CreateExperienceTagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExperienceTagResponse(rsp)
}

func (c *ClientWithResponses) CreateExperienceTagWithResponse(ctx context.Context, body CreateExperienceTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExperienceTagResponse, error) {
	rsp, err := c.CreateExperienceTag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExperienceTagResponse(rsp)
}

// DeleteExperienceTagWithResponse request returning *DeleteExperienceTagResponse
func (c *ClientWithResponses) DeleteExperienceTagWithResponse(ctx context.Context, experienceTagID ExperienceTagID, reqEditors ...RequestEditorFn) (*DeleteExperienceTagResponse, error) {
	rsp, err := c.DeleteExperienceTag(ctx, experienceTagID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExperienceTagResponse(rsp)
}

// GetExperienceTagWithResponse request returning *GetExperienceTagResponse
func (c *ClientWithResponses) GetExperienceTagWithResponse(ctx context.Context, experienceTagID ExperienceTagID, reqEditors ...RequestEditorFn) (*GetExperienceTagResponse, error) {
	rsp, err := c.GetExperienceTag(ctx, experienceTagID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperienceTagResponse(rsp)
}

// UpdateExperienceTagWithBodyWithResponse request with arbitrary body returning *UpdateExperienceTagResponse
func (c *ClientWithResponses) UpdateExperienceTagWithBodyWithResponse(ctx context.Context, experienceTagID ExperienceTagID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExperienceTagResponse, error) {
	rsp, err := c.UpdateExperienceTagWithBody(ctx, experienceTagID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExperienceTagResponse(rsp)
}

func (c *ClientWithResponses) UpdateExperienceTagWithResponse(ctx context.Context, experienceTagID ExperienceTagID, body UpdateExperienceTagJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExperienceTagResponse, error) {
	rsp, err := c.UpdateExperienceTag(ctx, experienceTagID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExperienceTagResponse(rsp)
}

// ListExperiencesWithExperienceTagWithResponse request returning *ListExperiencesWithExperienceTagResponse
func (c *ClientWithResponses) ListExperiencesWithExperienceTagWithResponse(ctx context.Context, experienceTagID ExperienceTagID, params *ListExperiencesWithExperienceTagParams, reqEditors ...RequestEditorFn) (*ListExperiencesWithExperienceTagResponse, error) {
	rsp, err := c.ListExperiencesWithExperienceTag(ctx, experienceTagID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExperiencesWithExperienceTagResponse(rsp)
}

// RemoveExperienceTagFromExperienceWithResponse request returning *RemoveExperienceTagFromExperienceResponse
func (c *ClientWithResponses) RemoveExperienceTagFromExperienceWithResponse(ctx context.Context, experienceTagID ExperienceTagID, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*RemoveExperienceTagFromExperienceResponse, error) {
	rsp, err := c.RemoveExperienceTagFromExperience(ctx, experienceTagID, experienceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveExperienceTagFromExperienceResponse(rsp)
}

// AddExperienceTagToExperienceWithResponse request returning *AddExperienceTagToExperienceResponse
func (c *ClientWithResponses) AddExperienceTagToExperienceWithResponse(ctx context.Context, experienceTagID ExperienceTagID, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*AddExperienceTagToExperienceResponse, error) {
	rsp, err := c.AddExperienceTagToExperience(ctx, experienceTagID, experienceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddExperienceTagToExperienceResponse(rsp)
}

// ListExperiencesWithResponse request returning *ListExperiencesResponse
func (c *ClientWithResponses) ListExperiencesWithResponse(ctx context.Context, params *ListExperiencesParams, reqEditors ...RequestEditorFn) (*ListExperiencesResponse, error) {
	rsp, err := c.ListExperiences(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExperiencesResponse(rsp)
}

// CreateExperienceWithBodyWithResponse request with arbitrary body returning *CreateExperienceResponse
func (c *ClientWithResponses) CreateExperienceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateExperienceResponse, error) {
	rsp, err := c.CreateExperienceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExperienceResponse(rsp)
}

func (c *ClientWithResponses) CreateExperienceWithResponse(ctx context.Context, body CreateExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateExperienceResponse, error) {
	rsp, err := c.CreateExperience(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateExperienceResponse(rsp)
}

// DeleteExperienceWithResponse request returning *DeleteExperienceResponse
func (c *ClientWithResponses) DeleteExperienceWithResponse(ctx context.Context, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*DeleteExperienceResponse, error) {
	rsp, err := c.DeleteExperience(ctx, experienceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExperienceResponse(rsp)
}

// GetExperienceWithResponse request returning *GetExperienceResponse
func (c *ClientWithResponses) GetExperienceWithResponse(ctx context.Context, experienceID ExperienceID, reqEditors ...RequestEditorFn) (*GetExperienceResponse, error) {
	rsp, err := c.GetExperience(ctx, experienceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperienceResponse(rsp)
}

// UpdateExperienceWithBodyWithResponse request with arbitrary body returning *UpdateExperienceResponse
func (c *ClientWithResponses) UpdateExperienceWithBodyWithResponse(ctx context.Context, experienceID ExperienceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateExperienceResponse, error) {
	rsp, err := c.UpdateExperienceWithBody(ctx, experienceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExperienceResponse(rsp)
}

func (c *ClientWithResponses) UpdateExperienceWithResponse(ctx context.Context, experienceID ExperienceID, body UpdateExperienceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateExperienceResponse, error) {
	rsp, err := c.UpdateExperience(ctx, experienceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateExperienceResponse(rsp)
}

// ListExperienceTagsForExperienceWithResponse request returning *ListExperienceTagsForExperienceResponse
func (c *ClientWithResponses) ListExperienceTagsForExperienceWithResponse(ctx context.Context, experienceID ExperienceID, params *ListExperienceTagsForExperienceParams, reqEditors ...RequestEditorFn) (*ListExperienceTagsForExperienceResponse, error) {
	rsp, err := c.ListExperienceTagsForExperience(ctx, experienceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListExperienceTagsForExperienceResponse(rsp)
}

// HealthWithResponse request returning *HealthResponse
func (c *ClientWithResponses) HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error) {
	rsp, err := c.Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthResponse(rsp)
}

// ListLaunchProfilesWithResponse request returning *ListLaunchProfilesResponse
func (c *ClientWithResponses) ListLaunchProfilesWithResponse(ctx context.Context, params *ListLaunchProfilesParams, reqEditors ...RequestEditorFn) (*ListLaunchProfilesResponse, error) {
	rsp, err := c.ListLaunchProfiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLaunchProfilesResponse(rsp)
}

// CreateLaunchProfileWithBodyWithResponse request with arbitrary body returning *CreateLaunchProfileResponse
func (c *ClientWithResponses) CreateLaunchProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLaunchProfileResponse, error) {
	rsp, err := c.CreateLaunchProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLaunchProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateLaunchProfileWithResponse(ctx context.Context, body CreateLaunchProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLaunchProfileResponse, error) {
	rsp, err := c.CreateLaunchProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLaunchProfileResponse(rsp)
}

// DeleteLaunchProfileWithResponse request returning *DeleteLaunchProfileResponse
func (c *ClientWithResponses) DeleteLaunchProfileWithResponse(ctx context.Context, launchProfileID LaunchProfileID, reqEditors ...RequestEditorFn) (*DeleteLaunchProfileResponse, error) {
	rsp, err := c.DeleteLaunchProfile(ctx, launchProfileID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLaunchProfileResponse(rsp)
}

// GetLaunchProfileWithResponse request returning *GetLaunchProfileResponse
func (c *ClientWithResponses) GetLaunchProfileWithResponse(ctx context.Context, launchProfileID LaunchProfileID, reqEditors ...RequestEditorFn) (*GetLaunchProfileResponse, error) {
	rsp, err := c.GetLaunchProfile(ctx, launchProfileID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLaunchProfileResponse(rsp)
}

// UpdateLaunchProfileWithBodyWithResponse request with arbitrary body returning *UpdateLaunchProfileResponse
func (c *ClientWithResponses) UpdateLaunchProfileWithBodyWithResponse(ctx context.Context, launchProfileID LaunchProfileID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLaunchProfileResponse, error) {
	rsp, err := c.UpdateLaunchProfileWithBody(ctx, launchProfileID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLaunchProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateLaunchProfileWithResponse(ctx context.Context, launchProfileID LaunchProfileID, body UpdateLaunchProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLaunchProfileResponse, error) {
	rsp, err := c.UpdateLaunchProfile(ctx, launchProfileID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLaunchProfileResponse(rsp)
}

// ListMetricsBuildsWithResponse request returning *ListMetricsBuildsResponse
func (c *ClientWithResponses) ListMetricsBuildsWithResponse(ctx context.Context, params *ListMetricsBuildsParams, reqEditors ...RequestEditorFn) (*ListMetricsBuildsResponse, error) {
	rsp, err := c.ListMetricsBuilds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMetricsBuildsResponse(rsp)
}

// CreateMetricsBuildWithBodyWithResponse request with arbitrary body returning *CreateMetricsBuildResponse
func (c *ClientWithResponses) CreateMetricsBuildWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMetricsBuildResponse, error) {
	rsp, err := c.CreateMetricsBuildWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMetricsBuildResponse(rsp)
}

func (c *ClientWithResponses) CreateMetricsBuildWithResponse(ctx context.Context, body CreateMetricsBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMetricsBuildResponse, error) {
	rsp, err := c.CreateMetricsBuild(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMetricsBuildResponse(rsp)
}

// GetMetricsBuildWithResponse request returning *GetMetricsBuildResponse
func (c *ClientWithResponses) GetMetricsBuildWithResponse(ctx context.Context, metricsBuildID MetricsBuildID, reqEditors ...RequestEditorFn) (*GetMetricsBuildResponse, error) {
	rsp, err := c.GetMetricsBuild(ctx, metricsBuildID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricsBuildResponse(rsp)
}

// ListProjectsWithResponse request returning *ListProjectsResponse
func (c *ClientWithResponses) ListProjectsWithResponse(ctx context.Context, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*ListProjectsResponse, error) {
	rsp, err := c.ListProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectsResponse(rsp)
}

// CreateProjectWithBodyWithResponse request with arbitrary body returning *CreateProjectResponse
func (c *ClientWithResponses) CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

// DeleteProjectWithResponse request returning *DeleteProjectResponse
func (c *ClientWithResponses) DeleteProjectWithResponse(ctx context.Context, projectID ProjectID, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error) {
	rsp, err := c.DeleteProject(ctx, projectID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectResponse(rsp)
}

// GetProjectWithResponse request returning *GetProjectResponse
func (c *ClientWithResponses) GetProjectWithResponse(ctx context.Context, projectID ProjectID, reqEditors ...RequestEditorFn) (*GetProjectResponse, error) {
	rsp, err := c.GetProject(ctx, projectID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectResponse(rsp)
}

// UpdateProjectWithBodyWithResponse request with arbitrary body returning *UpdateProjectResponse
func (c *ClientWithResponses) UpdateProjectWithBodyWithResponse(ctx context.Context, projectID ProjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectResponse, error) {
	rsp, err := c.UpdateProjectWithBody(ctx, projectID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectResponse(rsp)
}

func (c *ClientWithResponses) UpdateProjectWithResponse(ctx context.Context, projectID ProjectID, body UpdateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectResponse, error) {
	rsp, err := c.UpdateProject(ctx, projectID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectResponse(rsp)
}

// ListBranchesForProjectWithResponse request returning *ListBranchesForProjectResponse
func (c *ClientWithResponses) ListBranchesForProjectWithResponse(ctx context.Context, projectID ProjectID, params *ListBranchesForProjectParams, reqEditors ...RequestEditorFn) (*ListBranchesForProjectResponse, error) {
	rsp, err := c.ListBranchesForProject(ctx, projectID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBranchesForProjectResponse(rsp)
}

// CreateBranchForProjectWithBodyWithResponse request with arbitrary body returning *CreateBranchForProjectResponse
func (c *ClientWithResponses) CreateBranchForProjectWithBodyWithResponse(ctx context.Context, projectID ProjectID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBranchForProjectResponse, error) {
	rsp, err := c.CreateBranchForProjectWithBody(ctx, projectID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBranchForProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateBranchForProjectWithResponse(ctx context.Context, projectID ProjectID, body CreateBranchForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBranchForProjectResponse, error) {
	rsp, err := c.CreateBranchForProject(ctx, projectID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBranchForProjectResponse(rsp)
}

// DeleteBranchForProjectWithResponse request returning *DeleteBranchForProjectResponse
func (c *ClientWithResponses) DeleteBranchForProjectWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, reqEditors ...RequestEditorFn) (*DeleteBranchForProjectResponse, error) {
	rsp, err := c.DeleteBranchForProject(ctx, projectID, branchID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBranchForProjectResponse(rsp)
}

// GetBranchForProjectWithResponse request returning *GetBranchForProjectResponse
func (c *ClientWithResponses) GetBranchForProjectWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, reqEditors ...RequestEditorFn) (*GetBranchForProjectResponse, error) {
	rsp, err := c.GetBranchForProject(ctx, projectID, branchID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchForProjectResponse(rsp)
}

// ListBuildsForBranchesWithResponse request returning *ListBuildsForBranchesResponse
func (c *ClientWithResponses) ListBuildsForBranchesWithResponse(ctx context.Context, projectID ProjectID, branchID []BranchID, params *ListBuildsForBranchesParams, reqEditors ...RequestEditorFn) (*ListBuildsForBranchesResponse, error) {
	rsp, err := c.ListBuildsForBranches(ctx, projectID, branchID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBuildsForBranchesResponse(rsp)
}

// CreateBuildForBranchWithBodyWithResponse request with arbitrary body returning *CreateBuildForBranchResponse
func (c *ClientWithResponses) CreateBuildForBranchWithBodyWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBuildForBranchResponse, error) {
	rsp, err := c.CreateBuildForBranchWithBody(ctx, projectID, branchID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBuildForBranchResponse(rsp)
}

func (c *ClientWithResponses) CreateBuildForBranchWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, body CreateBuildForBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBuildForBranchResponse, error) {
	rsp, err := c.CreateBuildForBranch(ctx, projectID, branchID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBuildForBranchResponse(rsp)
}

// DeleteBuildForBranchWithResponse request returning *DeleteBuildForBranchResponse
func (c *ClientWithResponses) DeleteBuildForBranchWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, buildID BuildID, reqEditors ...RequestEditorFn) (*DeleteBuildForBranchResponse, error) {
	rsp, err := c.DeleteBuildForBranch(ctx, projectID, branchID, buildID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBuildForBranchResponse(rsp)
}

// GetBuildForBranchWithResponse request returning *GetBuildForBranchResponse
func (c *ClientWithResponses) GetBuildForBranchWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, buildID BuildID, reqEditors ...RequestEditorFn) (*GetBuildForBranchResponse, error) {
	rsp, err := c.GetBuildForBranch(ctx, projectID, branchID, buildID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBuildForBranchResponse(rsp)
}

// ListBatchesForBuildsWithResponse request returning *ListBatchesForBuildsResponse
func (c *ClientWithResponses) ListBatchesForBuildsWithResponse(ctx context.Context, projectID ProjectID, branchID BranchID, buildID []BuildID, params *ListBatchesForBuildsParams, reqEditors ...RequestEditorFn) (*ListBatchesForBuildsResponse, error) {
	rsp, err := c.ListBatchesForBuilds(ctx, projectID, branchID, buildID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBatchesForBuildsResponse(rsp)
}

// DestroySandboxWithBodyWithResponse request with arbitrary body returning *DestroySandboxResponse
func (c *ClientWithResponses) DestroySandboxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DestroySandboxResponse, error) {
	rsp, err := c.DestroySandboxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestroySandboxResponse(rsp)
}

func (c *ClientWithResponses) DestroySandboxWithResponse(ctx context.Context, body DestroySandboxJSONRequestBody, reqEditors ...RequestEditorFn) (*DestroySandboxResponse, error) {
	rsp, err := c.DestroySandbox(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestroySandboxResponse(rsp)
}

// SetupSandboxWithBodyWithResponse request with arbitrary body returning *SetupSandboxResponse
func (c *ClientWithResponses) SetupSandboxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetupSandboxResponse, error) {
	rsp, err := c.SetupSandboxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupSandboxResponse(rsp)
}

func (c *ClientWithResponses) SetupSandboxWithResponse(ctx context.Context, body SetupSandboxJSONRequestBody, reqEditors ...RequestEditorFn) (*SetupSandboxResponse, error) {
	rsp, err := c.SetupSandbox(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetupSandboxResponse(rsp)
}

// ListParameterSweepsWithResponse request returning *ListParameterSweepsResponse
func (c *ClientWithResponses) ListParameterSweepsWithResponse(ctx context.Context, params *ListParameterSweepsParams, reqEditors ...RequestEditorFn) (*ListParameterSweepsResponse, error) {
	rsp, err := c.ListParameterSweeps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListParameterSweepsResponse(rsp)
}

// CreateParameterSweepWithBodyWithResponse request with arbitrary body returning *CreateParameterSweepResponse
func (c *ClientWithResponses) CreateParameterSweepWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateParameterSweepResponse, error) {
	rsp, err := c.CreateParameterSweepWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateParameterSweepResponse(rsp)
}

func (c *ClientWithResponses) CreateParameterSweepWithResponse(ctx context.Context, body CreateParameterSweepJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateParameterSweepResponse, error) {
	rsp, err := c.CreateParameterSweep(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateParameterSweepResponse(rsp)
}

// GetParameterSweepWithResponse request returning *GetParameterSweepResponse
func (c *ClientWithResponses) GetParameterSweepWithResponse(ctx context.Context, sweepID ParameterSweepID, reqEditors ...RequestEditorFn) (*GetParameterSweepResponse, error) {
	rsp, err := c.GetParameterSweep(ctx, sweepID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetParameterSweepResponse(rsp)
}

// ValidateExperienceLocationWithBodyWithResponse request with arbitrary body returning *ValidateExperienceLocationResponse
func (c *ClientWithResponses) ValidateExperienceLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateExperienceLocationResponse, error) {
	rsp, err := c.ValidateExperienceLocationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateExperienceLocationResponse(rsp)
}

func (c *ClientWithResponses) ValidateExperienceLocationWithResponse(ctx context.Context, body ValidateExperienceLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateExperienceLocationResponse, error) {
	rsp, err := c.ValidateExperienceLocation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateExperienceLocationResponse(rsp)
}

// ListViewSessionsWithResponse request returning *ListViewSessionsResponse
func (c *ClientWithResponses) ListViewSessionsWithResponse(ctx context.Context, params *ListViewSessionsParams, reqEditors ...RequestEditorFn) (*ListViewSessionsResponse, error) {
	rsp, err := c.ListViewSessions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListViewSessionsResponse(rsp)
}

// CreateViewSessionWithResponse request returning *CreateViewSessionResponse
func (c *ClientWithResponses) CreateViewSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CreateViewSessionResponse, error) {
	rsp, err := c.CreateViewSession(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateViewSessionResponse(rsp)
}

// GetViewSessionWithResponse request returning *GetViewSessionResponse
func (c *ClientWithResponses) GetViewSessionWithResponse(ctx context.Context, viewSessionID ViewSessionID, reqEditors ...RequestEditorFn) (*GetViewSessionResponse, error) {
	rsp, err := c.GetViewSession(ctx, viewSessionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetViewSessionResponse(rsp)
}

// CreateViewUpdateWithBodyWithResponse request with arbitrary body returning *CreateViewUpdateResponse
func (c *ClientWithResponses) CreateViewUpdateWithBodyWithResponse(ctx context.Context, viewSessionID ViewSessionID, viewUpdateID ViewUpdateID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateViewUpdateResponse, error) {
	rsp, err := c.CreateViewUpdateWithBody(ctx, viewSessionID, viewUpdateID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateViewUpdateResponse(rsp)
}

// ParseListBatchesResponse parses an HTTP response from a ListBatchesWithResponse call
func ParseListBatchesResponse(rsp *http.Response) (*ListBatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBatchesOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBatchResponse parses an HTTP response from a CreateBatchWithResponse call
func ParseCreateBatchResponse(rsp *http.Response) (*CreateBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Batch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetBatchResponse parses an HTTP response from a GetBatchWithResponse call
func ParseGetBatchResponse(rsp *http.Response) (*GetBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Batch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelBatchResponse parses an HTTP response from a CancelBatchWithResponse call
func ParseCancelBatchResponse(rsp *http.Response) (*CancelBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListJobsResponse parses an HTTP response from a ListJobsWithResponse call
func ParseListJobsResponse(rsp *http.Response) (*ListJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListJobsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobResponse parses an HTTP response from a GetJobWithResponse call
func ParseGetJobResponse(rsp *http.Response) (*GetJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListJobLogsForJobResponse parses an HTTP response from a ListJobLogsForJobWithResponse call
func ParseListJobLogsForJobResponse(rsp *http.Response) (*ListJobLogsForJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJobLogsForJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListJobLogsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateJobLogResponse parses an HTTP response from a CreateJobLogWithResponse call
func ParseCreateJobLogResponse(rsp *http.Response) (*CreateJobLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateJobLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteJobLogResponse parses an HTTP response from a DeleteJobLogWithResponse call
func ParseDeleteJobLogResponse(rsp *http.Response) (*DeleteJobLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJobLogResponse parses an HTTP response from a GetJobLogWithResponse call
func ParseGetJobLogResponse(rsp *http.Response) (*GetJobLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMetricsForJobResponse parses an HTTP response from a ListMetricsForJobWithResponse call
func ParseListMetricsForJobResponse(rsp *http.Response) (*ListMetricsForJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMetricsForJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListJobMetricsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMetricResponse parses an HTTP response from a CreateMetricWithResponse call
func ParseCreateMetricResponse(rsp *http.Response) (*CreateMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobMetric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListMetricsForMetricIDsResponse parses an HTTP response from a ListMetricsForMetricIDsWithResponse call
func ParseListMetricsForMetricIDsResponse(rsp *http.Response) (*ListMetricsForMetricIDsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMetricsForMetricIDsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListJobMetricsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMetricsDataForMetricIDsResponse parses an HTTP response from a ListMetricsDataForMetricIDsWithResponse call
func ParseListMetricsDataForMetricIDsResponse(rsp *http.Response) (*ListMetricsDataForMetricIDsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMetricsDataForMetricIDsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListMetricsDataAndMetricIDOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddMetricsDataToMetricResponse parses an HTTP response from a AddMetricsDataToMetricWithResponse call
func ParseAddMetricsDataToMetricResponse(rsp *http.Response) (*AddMetricsDataToMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMetricsDataToMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MetricDataToMetric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListMetricsDataForJobResponse parses an HTTP response from a ListMetricsDataForJobWithResponse call
func ParseListMetricsDataForJobResponse(rsp *http.Response) (*ListMetricsDataForJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMetricsDataForJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListJobMetricsDataOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMetricsDataResponse parses an HTTP response from a CreateMetricsDataWithResponse call
func ParseCreateMetricsDataResponse(rsp *http.Response) (*CreateMetricsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMetricsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest JobMetricsData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListMetricsDataForMetricsDataIDsResponse parses an HTTP response from a ListMetricsDataForMetricsDataIDsWithResponse call
func ParseListMetricsDataForMetricsDataIDsResponse(rsp *http.Response) (*ListMetricsDataForMetricsDataIDsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMetricsDataForMetricsDataIDsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListJobMetricsDataOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateJobMetricsStatusResponse parses an HTTP response from a UpdateJobMetricsStatusWithResponse call
func ParseUpdateJobMetricsStatusResponse(rsp *http.Response) (*UpdateJobMetricsStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateJobMetricsStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListBatchLogsForBatchResponse parses an HTTP response from a ListBatchLogsForBatchWithResponse call
func ParseListBatchLogsForBatchResponse(rsp *http.Response) (*ListBatchLogsForBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBatchLogsForBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBatchLogsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBatchLogResponse parses an HTTP response from a CreateBatchLogWithResponse call
func ParseCreateBatchLogResponse(rsp *http.Response) (*CreateBatchLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBatchLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteBatchLogResponse parses an HTTP response from a DeleteBatchLogWithResponse call
func ParseDeleteBatchLogResponse(rsp *http.Response) (*DeleteBatchLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBatchLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBatchLogResponse parses an HTTP response from a GetBatchLogWithResponse call
func ParseGetBatchLogResponse(rsp *http.Response) (*GetBatchLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBatchLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBatchMetricsResponse parses an HTTP response from a ListBatchMetricsWithResponse call
func ParseListBatchMetricsResponse(rsp *http.Response) (*ListBatchMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBatchMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBatchMetricsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBatchMetricResponse parses an HTTP response from a CreateBatchMetricWithResponse call
func ParseCreateBatchMetricResponse(rsp *http.Response) (*CreateBatchMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBatchMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchMetric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListBatchMetricsForBatchMetricIDsResponse parses an HTTP response from a ListBatchMetricsForBatchMetricIDsWithResponse call
func ParseListBatchMetricsForBatchMetricIDsResponse(rsp *http.Response) (*ListBatchMetricsForBatchMetricIDsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBatchMetricsForBatchMetricIDsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBatchMetricsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBatchMetricsDataForBatchMetricIDsResponse parses an HTTP response from a ListBatchMetricsDataForBatchMetricIDsWithResponse call
func ParseListBatchMetricsDataForBatchMetricIDsResponse(rsp *http.Response) (*ListBatchMetricsDataForBatchMetricIDsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBatchMetricsDataForBatchMetricIDsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBatchMetricsDataForBatchMetricIDsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddBatchMetricsDataToBatchMetricResponse parses an HTTP response from a AddBatchMetricsDataToBatchMetricWithResponse call
func ParseAddBatchMetricsDataToBatchMetricResponse(rsp *http.Response) (*AddBatchMetricsDataToBatchMetricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddBatchMetricsDataToBatchMetricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchMetricsDataToBatchMetric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListBatchMetricsDataResponse parses an HTTP response from a ListBatchMetricsDataWithResponse call
func ParseListBatchMetricsDataResponse(rsp *http.Response) (*ListBatchMetricsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBatchMetricsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBatchMetricsDataOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBatchMetricsDataResponse parses an HTTP response from a CreateBatchMetricsDataWithResponse call
func ParseCreateBatchMetricsDataResponse(rsp *http.Response) (*CreateBatchMetricsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBatchMetricsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchMetricsData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListBatchMetricsDataForBatchMetricsDataIDsResponse parses an HTTP response from a ListBatchMetricsDataForBatchMetricsDataIDsWithResponse call
func ParseListBatchMetricsDataForBatchMetricsDataIDsResponse(rsp *http.Response) (*ListBatchMetricsDataForBatchMetricsDataIDsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBatchMetricsDataForBatchMetricsDataIDsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBatchMetricsDataOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateBatchMetricsStatusResponse parses an HTTP response from a UpdateBatchMetricsStatusWithResponse call
func ParseUpdateBatchMetricsStatusResponse(rsp *http.Response) (*UpdateBatchMetricsStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBatchMetricsStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Batch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListBuildsResponse parses an HTTP response from a ListBuildsWithResponse call
func ParseListBuildsResponse(rsp *http.Response) (*ListBuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBuildsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBuildResponse parses an HTTP response from a GetBuildWithResponse call
func ParseGetBuildResponse(rsp *http.Response) (*GetBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Build
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListExperienceTagsResponse parses an HTTP response from a ListExperienceTagsWithResponse call
func ParseListExperienceTagsResponse(rsp *http.Response) (*ListExperienceTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExperienceTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExperienceTagsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateExperienceTagResponse parses an HTTP response from a CreateExperienceTagWithResponse call
func ParseCreateExperienceTagResponse(rsp *http.Response) (*CreateExperienceTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateExperienceTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExperienceTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteExperienceTagResponse parses an HTTP response from a DeleteExperienceTagWithResponse call
func ParseDeleteExperienceTagResponse(rsp *http.Response) (*DeleteExperienceTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteExperienceTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExperienceTagResponse parses an HTTP response from a GetExperienceTagWithResponse call
func ParseGetExperienceTagResponse(rsp *http.Response) (*GetExperienceTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperienceTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperienceTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateExperienceTagResponse parses an HTTP response from a UpdateExperienceTagWithResponse call
func ParseUpdateExperienceTagResponse(rsp *http.Response) (*UpdateExperienceTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateExperienceTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperienceTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListExperiencesWithExperienceTagResponse parses an HTTP response from a ListExperiencesWithExperienceTagWithResponse call
func ParseListExperiencesWithExperienceTagResponse(rsp *http.Response) (*ListExperiencesWithExperienceTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExperiencesWithExperienceTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExperiencesOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveExperienceTagFromExperienceResponse parses an HTTP response from a RemoveExperienceTagFromExperienceWithResponse call
func ParseRemoveExperienceTagFromExperienceResponse(rsp *http.Response) (*RemoveExperienceTagFromExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveExperienceTagFromExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddExperienceTagToExperienceResponse parses an HTTP response from a AddExperienceTagToExperienceWithResponse call
func ParseAddExperienceTagToExperienceResponse(rsp *http.Response) (*AddExperienceTagToExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddExperienceTagToExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListExperiencesResponse parses an HTTP response from a ListExperiencesWithResponse call
func ParseListExperiencesResponse(rsp *http.Response) (*ListExperiencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExperiencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExperiencesOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateExperienceResponse parses an HTTP response from a CreateExperienceWithResponse call
func ParseCreateExperienceResponse(rsp *http.Response) (*CreateExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Experience
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteExperienceResponse parses an HTTP response from a DeleteExperienceWithResponse call
func ParseDeleteExperienceResponse(rsp *http.Response) (*DeleteExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExperienceResponse parses an HTTP response from a GetExperienceWithResponse call
func ParseGetExperienceResponse(rsp *http.Response) (*GetExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Experience
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateExperienceResponse parses an HTTP response from a UpdateExperienceWithResponse call
func ParseUpdateExperienceResponse(rsp *http.Response) (*UpdateExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Experience
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListExperienceTagsForExperienceResponse parses an HTTP response from a ListExperienceTagsForExperienceWithResponse call
func ParseListExperienceTagsForExperienceResponse(rsp *http.Response) (*ListExperienceTagsForExperienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListExperienceTagsForExperienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListExperienceTagsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHealthResponse parses an HTTP response from a HealthWithResponse call
func ParseHealthResponse(rsp *http.Response) (*HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListLaunchProfilesResponse parses an HTTP response from a ListLaunchProfilesWithResponse call
func ParseListLaunchProfilesResponse(rsp *http.Response) (*ListLaunchProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLaunchProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListLaunchProfilesOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateLaunchProfileResponse parses an HTTP response from a CreateLaunchProfileWithResponse call
func ParseCreateLaunchProfileResponse(rsp *http.Response) (*CreateLaunchProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLaunchProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LaunchProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteLaunchProfileResponse parses an HTTP response from a DeleteLaunchProfileWithResponse call
func ParseDeleteLaunchProfileResponse(rsp *http.Response) (*DeleteLaunchProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLaunchProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLaunchProfileResponse parses an HTTP response from a GetLaunchProfileWithResponse call
func ParseGetLaunchProfileResponse(rsp *http.Response) (*GetLaunchProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLaunchProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LaunchProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateLaunchProfileResponse parses an HTTP response from a UpdateLaunchProfileWithResponse call
func ParseUpdateLaunchProfileResponse(rsp *http.Response) (*UpdateLaunchProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLaunchProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LaunchProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMetricsBuildsResponse parses an HTTP response from a ListMetricsBuildsWithResponse call
func ParseListMetricsBuildsResponse(rsp *http.Response) (*ListMetricsBuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMetricsBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListMetricsBuildOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMetricsBuildResponse parses an HTTP response from a CreateMetricsBuildWithResponse call
func ParseCreateMetricsBuildResponse(rsp *http.Response) (*CreateMetricsBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMetricsBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MetricsBuild
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMetricsBuildResponse parses an HTTP response from a GetMetricsBuildWithResponse call
func ParseGetMetricsBuildResponse(rsp *http.Response) (*GetMetricsBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricsBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetricsBuild
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListProjectsResponse parses an HTTP response from a ListProjectsWithResponse call
func ParseListProjectsResponse(rsp *http.Response) (*ListProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProjectsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProjectResponse parses an HTTP response from a CreateProjectWithResponse call
func ParseCreateProjectResponse(rsp *http.Response) (*CreateProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteProjectResponse parses an HTTP response from a DeleteProjectWithResponse call
func ParseDeleteProjectResponse(rsp *http.Response) (*DeleteProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectResponse parses an HTTP response from a GetProjectWithResponse call
func ParseGetProjectResponse(rsp *http.Response) (*GetProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateProjectResponse parses an HTTP response from a UpdateProjectWithResponse call
func ParseUpdateProjectResponse(rsp *http.Response) (*UpdateProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBranchesForProjectResponse parses an HTTP response from a ListBranchesForProjectWithResponse call
func ParseListBranchesForProjectResponse(rsp *http.Response) (*ListBranchesForProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBranchesForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBranchesOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBranchForProjectResponse parses an HTTP response from a CreateBranchForProjectWithResponse call
func ParseCreateBranchForProjectResponse(rsp *http.Response) (*CreateBranchForProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBranchForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Branch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteBranchForProjectResponse parses an HTTP response from a DeleteBranchForProjectWithResponse call
func ParseDeleteBranchForProjectResponse(rsp *http.Response) (*DeleteBranchForProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBranchForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBranchForProjectResponse parses an HTTP response from a GetBranchForProjectWithResponse call
func ParseGetBranchForProjectResponse(rsp *http.Response) (*GetBranchForProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Branch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBuildsForBranchesResponse parses an HTTP response from a ListBuildsForBranchesWithResponse call
func ParseListBuildsForBranchesResponse(rsp *http.Response) (*ListBuildsForBranchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBuildsForBranchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBuildsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBuildForBranchResponse parses an HTTP response from a CreateBuildForBranchWithResponse call
func ParseCreateBuildForBranchResponse(rsp *http.Response) (*CreateBuildForBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBuildForBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Build
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteBuildForBranchResponse parses an HTTP response from a DeleteBuildForBranchWithResponse call
func ParseDeleteBuildForBranchResponse(rsp *http.Response) (*DeleteBuildForBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBuildForBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBuildForBranchResponse parses an HTTP response from a GetBuildForBranchWithResponse call
func ParseGetBuildForBranchResponse(rsp *http.Response) (*GetBuildForBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBuildForBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Build
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBatchesForBuildsResponse parses an HTTP response from a ListBatchesForBuildsWithResponse call
func ParseListBatchesForBuildsResponse(rsp *http.Response) (*ListBatchesForBuildsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBatchesForBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBatchesOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestroySandboxResponse parses an HTTP response from a DestroySandboxWithResponse call
func ParseDestroySandboxResponse(rsp *http.Response) (*DestroySandboxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DestroySandboxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetupSandboxResponse parses an HTTP response from a SetupSandboxWithResponse call
func ParseSetupSandboxResponse(rsp *http.Response) (*SetupSandboxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetupSandboxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListParameterSweepsResponse parses an HTTP response from a ListParameterSweepsWithResponse call
func ParseListParameterSweepsResponse(rsp *http.Response) (*ListParameterSweepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListParameterSweepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListParameterSweepsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateParameterSweepResponse parses an HTTP response from a CreateParameterSweepWithResponse call
func ParseCreateParameterSweepResponse(rsp *http.Response) (*CreateParameterSweepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateParameterSweepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ParameterSweep
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetParameterSweepResponse parses an HTTP response from a GetParameterSweepWithResponse call
func ParseGetParameterSweepResponse(rsp *http.Response) (*GetParameterSweepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetParameterSweepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParameterSweep
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseValidateExperienceLocationResponse parses an HTTP response from a ValidateExperienceLocationWithResponse call
func ParseValidateExperienceLocationResponse(rsp *http.Response) (*ValidateExperienceLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateExperienceLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExperienceLocationContents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListViewSessionsResponse parses an HTTP response from a ListViewSessionsWithResponse call
func ParseListViewSessionsResponse(rsp *http.Response) (*ListViewSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListViewSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListViewObjectsOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateViewSessionResponse parses an HTTP response from a CreateViewSessionWithResponse call
func ParseCreateViewSessionResponse(rsp *http.Response) (*CreateViewSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateViewSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ViewSessionID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetViewSessionResponse parses an HTTP response from a GetViewSessionWithResponse call
func ParseGetViewSessionResponse(rsp *http.Response) (*GetViewSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetViewSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ViewObjectAndMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateViewUpdateResponse parses an HTTP response from a CreateViewUpdateWithResponse call
func ParseCreateViewUpdateResponse(rsp *http.Response) (*CreateViewUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateViewUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ViewSessionUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
