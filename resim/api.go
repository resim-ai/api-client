// Code generated by openapi-cli-generator. DO NOT EDIT.
// See https://github.com/danielgtaylor/openapi-cli-generator

package main

import (
	"fmt"
	"strings"

	"github.com/danielgtaylor/openapi-cli-generator/cli"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"gopkg.in/h2non/gentleman.v2"
)

var apiSubcommand bool

func apiServers() []map[string]string {
	return []map[string]string{

		map[string]string{
			"description": "",
			"url":         "https://api.resim.ai/v1",
		},
	}
}

// ApiListBatches ListBatches
func ApiListBatches(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listbatches"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches"

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}
	paramOrderby := params.GetString("orderby")
	if paramOrderby != "" {
		req = req.AddQuery("orderBy", fmt.Sprintf("%v", paramOrderby))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCreateBatch CreateBatch
func ApiCreateBatch(params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "createbatch"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches"

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiGetBatch GetBatch
func ApiGetBatch(paramBatchid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getbatch"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches/{batchID}"
	url = strings.Replace(url, "{batchID}", paramBatchid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCancelBatch CancelBatch
func ApiCancelBatch(paramBatchid string, params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
	handlerPath := "cancelbatch"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches/{batchID}/:cancel"
	url = strings.Replace(url, "{batchID}", paramBatchid, 1)

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiListJobs ListJobs
func ApiListJobs(paramBatchid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listjobs"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches/{batchID}/jobs"
	url = strings.Replace(url, "{batchID}", paramBatchid, 1)

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiGetJob GetJob
func ApiGetJob(paramBatchid string, paramJobid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getjob"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches/{batchID}/jobs/{jobID}"
	url = strings.Replace(url, "{batchID}", paramBatchid, 1)
	url = strings.Replace(url, "{jobID}", paramJobid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCreateLog CreateLog
func ApiCreateLog(paramBatchid string, paramJobid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "createlog"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches/{batchID}/jobs/{jobID}/logs"
	url = strings.Replace(url, "{batchID}", paramBatchid, 1)
	url = strings.Replace(url, "{jobID}", paramJobid, 1)

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiListLogsForJob ListLogsForJob
func ApiListLogsForJob(paramBatchid string, paramJobid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listlogsforjob"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches/{batchID}/jobs/{jobID}/logs"
	url = strings.Replace(url, "{batchID}", paramBatchid, 1)
	url = strings.Replace(url, "{jobID}", paramJobid, 1)

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiDeleteLog DeleteLog
func ApiDeleteLog(paramBatchid string, paramJobid string, paramLogid string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "deletelog"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches/{batchID}/jobs/{jobID}/logs/{logID}"
	url = strings.Replace(url, "{batchID}", paramBatchid, 1)
	url = strings.Replace(url, "{jobID}", paramJobid, 1)
	url = strings.Replace(url, "{logID}", paramLogid, 1)

	req := cli.Client.Delete().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiGetLog GetLog
func ApiGetLog(paramBatchid string, paramJobid string, paramLogid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getlog"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches/{batchID}/jobs/{jobID}/logs/{logID}"
	url = strings.Replace(url, "{batchID}", paramBatchid, 1)
	url = strings.Replace(url, "{jobID}", paramJobid, 1)
	url = strings.Replace(url, "{logID}", paramLogid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiGetJobMetrics GetJobMetrics
func ApiGetJobMetrics(paramBatchid string, paramJobid string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "getjobmetrics"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/batches/{batchID}/jobs/{jobID}/metrics"
	url = strings.Replace(url, "{batchID}", paramBatchid, 1)
	url = strings.Replace(url, "{jobID}", paramJobid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiListBuilds ListBuilds
func ApiListBuilds(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listbuilds"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/builds"

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}
	paramOrderby := params.GetString("orderby")
	if paramOrderby != "" {
		req = req.AddQuery("orderBy", fmt.Sprintf("%v", paramOrderby))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiGetBuild GetBuild
func ApiGetBuild(paramBuildid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getbuild"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/builds/{buildID}"
	url = strings.Replace(url, "{buildID}", paramBuildid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiListExperienceTags ListExperienceTags
func ApiListExperienceTags(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listexperiencetags"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experienceTags"

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}
	paramOrderby := params.GetString("orderby")
	if paramOrderby != "" {
		req = req.AddQuery("orderBy", fmt.Sprintf("%v", paramOrderby))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCreateExperienceTag CreateExperienceTag
func ApiCreateExperienceTag(params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "createexperiencetag"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experienceTags"

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiDeleteExperienceTag DeleteExperienceTag
func ApiDeleteExperienceTag(paramExperiencetagid string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "deleteexperiencetag"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experienceTags/{experienceTagID}"
	url = strings.Replace(url, "{experienceTagID}", paramExperiencetagid, 1)

	req := cli.Client.Delete().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiGetExperienceTag GetExperienceTag
func ApiGetExperienceTag(paramExperiencetagid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getexperiencetag"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experienceTags/{experienceTagID}"
	url = strings.Replace(url, "{experienceTagID}", paramExperiencetagid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiUpdateExperienceTag UpdateExperienceTag
func ApiUpdateExperienceTag(paramExperiencetagid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "updateexperiencetag"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experienceTags/{experienceTagID}"
	url = strings.Replace(url, "{experienceTagID}", paramExperiencetagid, 1)

	req := cli.Client.Patch().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiListExperiencesWithExperienceTag ListExperiencesWithExperienceTag
func ApiListExperiencesWithExperienceTag(paramExperiencetagid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listexperienceswithexperiencetag"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experienceTags/{experienceTagID}/experiences"
	url = strings.Replace(url, "{experienceTagID}", paramExperiencetagid, 1)

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiRemoveExperienceTagFromExperience RemoveExperienceTagFromExperience
func ApiRemoveExperienceTagFromExperience(paramExperiencetagid string, paramExperienceid string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "removeexperiencetagfromexperience"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experienceTags/{experienceTagID}/experiences/{experienceID}"
	url = strings.Replace(url, "{experienceTagID}", paramExperiencetagid, 1)
	url = strings.Replace(url, "{experienceID}", paramExperienceid, 1)

	req := cli.Client.Delete().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiAddExperienceTagToExperience AddExperienceTagToExperience
func ApiAddExperienceTagToExperience(paramExperiencetagid string, paramExperienceid string, params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
	handlerPath := "addexperiencetagtoexperience"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experienceTags/{experienceTagID}/experiences/{experienceID}"
	url = strings.Replace(url, "{experienceTagID}", paramExperiencetagid, 1)
	url = strings.Replace(url, "{experienceID}", paramExperienceid, 1)

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiListExperiences ListExperiences
func ApiListExperiences(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listexperiences"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experiences"

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}
	paramOrderby := params.GetString("orderby")
	if paramOrderby != "" {
		req = req.AddQuery("orderBy", fmt.Sprintf("%v", paramOrderby))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCreateExperience CreateExperience
func ApiCreateExperience(params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "createexperience"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experiences"

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiDeleteExperience DeleteExperience
func ApiDeleteExperience(paramExperienceid string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "deleteexperience"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experiences/{experienceID}"
	url = strings.Replace(url, "{experienceID}", paramExperienceid, 1)

	req := cli.Client.Delete().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiGetExperience GetExperience
func ApiGetExperience(paramExperienceid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getexperience"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experiences/{experienceID}"
	url = strings.Replace(url, "{experienceID}", paramExperienceid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiUpdateExperience UpdateExperience
func ApiUpdateExperience(paramExperienceid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "updateexperience"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experiences/{experienceID}"
	url = strings.Replace(url, "{experienceID}", paramExperienceid, 1)

	req := cli.Client.Patch().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiListExperienceTagsForExperience ListExperienceTagsForExperience
func ApiListExperienceTagsForExperience(paramExperienceid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listexperiencetagsforexperience"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/experiences/{experienceID}/experienceTags"
	url = strings.Replace(url, "{experienceID}", paramExperienceid, 1)

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiHealth Health
func ApiHealth(params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "health"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/health"

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiListProjects ListProjects
func ApiListProjects(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listprojects"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects"

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}
	paramOrderby := params.GetString("orderby")
	if paramOrderby != "" {
		req = req.AddQuery("orderBy", fmt.Sprintf("%v", paramOrderby))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCreateProject CreateProject
func ApiCreateProject(params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "createproject"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects"

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiDeleteProject DeleteProject
func ApiDeleteProject(paramProjectid string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "deleteproject"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)

	req := cli.Client.Delete().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiGetProject GetProject
func ApiGetProject(paramProjectid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getproject"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiUpdateProject UpdateProject
func ApiUpdateProject(paramProjectid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "updateproject"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)

	req := cli.Client.Patch().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiListBranchesForProject ListBranchesForProject
func ApiListBranchesForProject(paramProjectid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listbranchesforproject"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}/branches"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}
	paramOrderby := params.GetString("orderby")
	if paramOrderby != "" {
		req = req.AddQuery("orderBy", fmt.Sprintf("%v", paramOrderby))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCreateBranchForProject CreateBranchForProject
func ApiCreateBranchForProject(paramProjectid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "createbranchforproject"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}/branches"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiDeleteBranchForProject DeleteBranchForProject
func ApiDeleteBranchForProject(paramProjectid string, paramBranchid string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "deletebranchforproject"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}/branches/{branchID}"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)
	url = strings.Replace(url, "{branchID}", paramBranchid, 1)

	req := cli.Client.Delete().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiGetBranchForProject GetBranchForProject
func ApiGetBranchForProject(paramProjectid string, paramBranchid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getbranchforproject"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}/branches/{branchID}"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)
	url = strings.Replace(url, "{branchID}", paramBranchid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiListBuildsForBranch ListBuildsForBranch
func ApiListBuildsForBranch(paramProjectid string, paramBranchid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listbuildsforbranch"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}/branches/{branchID}/builds"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)
	url = strings.Replace(url, "{branchID}", paramBranchid, 1)

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}
	paramOrderby := params.GetString("orderby")
	if paramOrderby != "" {
		req = req.AddQuery("orderBy", fmt.Sprintf("%v", paramOrderby))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCreateBuildForBranch CreateBuildForBranch
func ApiCreateBuildForBranch(paramProjectid string, paramBranchid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "createbuildforbranch"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}/branches/{branchID}/builds"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)
	url = strings.Replace(url, "{branchID}", paramBranchid, 1)

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiDeleteBuildForBranch DeleteBuildForBranch
func ApiDeleteBuildForBranch(paramProjectid string, paramBranchid string, paramBuildid string, params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "deletebuildforbranch"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}/branches/{branchID}/builds/{buildID}"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)
	url = strings.Replace(url, "{branchID}", paramBranchid, 1)
	url = strings.Replace(url, "{buildID}", paramBuildid, 1)

	req := cli.Client.Delete().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiGetBuildForBranch GetBuildForBranch
func ApiGetBuildForBranch(paramProjectid string, paramBranchid string, paramBuildid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getbuildforbranch"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}/branches/{branchID}/builds/{buildID}"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)
	url = strings.Replace(url, "{branchID}", paramBranchid, 1)
	url = strings.Replace(url, "{buildID}", paramBuildid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiListBatchesForBuild ListBatchesForBuild
func ApiListBatchesForBuild(paramProjectid string, paramBranchid string, paramBuildid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listbatchesforbuild"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/projects/{projectID}/branches/{branchID}/builds/{buildID}/batches"
	url = strings.Replace(url, "{projectID}", paramProjectid, 1)
	url = strings.Replace(url, "{branchID}", paramBranchid, 1)
	url = strings.Replace(url, "{buildID}", paramBuildid, 1)

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}
	paramOrderby := params.GetString("orderby")
	if paramOrderby != "" {
		req = req.AddQuery("orderBy", fmt.Sprintf("%v", paramOrderby))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiDestroySandbox DestroySandbox
func ApiDestroySandbox(params *viper.Viper) (*gentleman.Response, interface{}, error) {
	handlerPath := "destroysandbox"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/sandbox/:destroy"

	req := cli.Client.Delete().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiSetupSandbox SetupSandbox
func ApiSetupSandbox(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
	handlerPath := "setupsandbox"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/sandbox/:setup"

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/json").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiListViewSessions ListViewSessions
func ApiListViewSessions(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "listviewsessions"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/view/sessions"

	req := cli.Client.Get().URL(url)

	paramPagesize := params.GetInt64("pagesize")
	if paramPagesize != 0 {
		req = req.AddQuery("pageSize", fmt.Sprintf("%v", paramPagesize))
	}
	paramPagetoken := params.GetString("pagetoken")
	if paramPagetoken != "" {
		req = req.AddQuery("pageToken", fmt.Sprintf("%v", paramPagetoken))
	}
	paramOrderby := params.GetString("orderby")
	if paramOrderby != "" {
		req = req.AddQuery("orderBy", fmt.Sprintf("%v", paramOrderby))
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCreateViewSession CreateViewSession
func ApiCreateViewSession(params *viper.Viper, body string) (*gentleman.Response, interface{}, error) {
	handlerPath := "createviewsession"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/view/sessions"

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after
	}

	return resp, decoded, nil
}

// ApiGetViewSession GetViewSession
func ApiGetViewSession(paramViewsessionid string, params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "getviewsession"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/view/sessions/{viewSessionID}"
	url = strings.Replace(url, "{viewSessionID}", paramViewsessionid, 1)

	req := cli.Client.Get().URL(url)

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

// ApiCreateViewUpdate CreateViewUpdate
func ApiCreateViewUpdate(paramViewsessionid string, paramViewupdateid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
	handlerPath := "createviewupdate"
	if apiSubcommand {
		handlerPath = "api " + handlerPath
	}

	server := viper.GetString("server")
	if server == "" {
		server = apiServers()[viper.GetInt("server-index")]["url"]
	}

	url := server + "/view/sessions/{viewSessionID}/updates/{viewUpdateID}"
	url = strings.Replace(url, "{viewSessionID}", paramViewsessionid, 1)
	url = strings.Replace(url, "{viewUpdateID}", paramViewupdateid, 1)

	req := cli.Client.Post().URL(url)

	if body != "" {
		req = req.AddHeader("Content-Type", "application/octet-stream").BodyString(body)
	}

	cli.HandleBefore(handlerPath, params, req)

	resp, err := req.Do()
	if err != nil {
		return nil, nil, errors.Wrap(err, "Request failed")
	}

	var decoded map[string]interface{}

	if resp.StatusCode < 400 {
		if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
			return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
		}
	} else {
		return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
	}

	after := cli.HandleAfter(handlerPath, params, resp, decoded)
	if after != nil {
		decoded = after.(map[string]interface{})
	}

	return resp, decoded, nil
}

func apiRegister(subcommand bool) {
	root := cli.Root

	if subcommand {
		root = &cobra.Command{
			Use:   "api",
			Short: "ReRun API",
			Long:  cli.Markdown(""),
		}
		apiSubcommand = true
	} else {
		cli.Root.Short = "ReRun API"
		cli.Root.Long = cli.Markdown("")
	}

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listbatches",
			Short:   "ListBatches",
			Long:    cli.Markdown("List the batches."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListBatches(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")
		cmd.Flags().String("orderby", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createbatch",
			Short:   "CreateBatch",
			Long:    cli.Markdown("Adds a batch.  ID should be omitted and will be returned in the response.\n## Request Schema (application/json)\n\nproperties:\n  buildID:\n    $ref: '#/components/schemas/buildID'\n  experienceIDs:\n    items:\n      $ref: '#/components/schemas/experienceID'\n    type: array\n  experienceTagIDs:\n    items:\n      $ref: '#/components/schemas/experienceTagID'\n    type: array\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateBatch(params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getbatch batchid",
			Short:   "GetBatch",
			Long:    cli.Markdown("Returns a batch."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetBatch(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "cancelbatch batchid",
			Short:   "CancelBatch",
			Long:    cli.Markdown("Cancels a batch."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("", args[1:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCancelBatch(args[0], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listjobs batchid",
			Short:   "ListJobs",
			Long:    cli.Markdown("List the jobs in the given batch."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListJobs(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getjob batchid jobid",
			Short:   "GetJob",
			Long:    cli.Markdown("Retrieve the given job."),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetJob(args[0], args[1], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createlog batchid jobid",
			Short:   "CreateLog",
			Long:    cli.Markdown("Adds a log.  ID should be omitted and will be returned in the response.\n## Request Schema (application/json)\n\nproperties:\n  checksum:\n    $ref: '#/components/schemas/checksum'\n  creationTimestamp:\n    $ref: '#/components/schemas/creationTimestamp'\n  fileName:\n    $ref: '#/components/schemas/fileName'\n  fileSize:\n    $ref: '#/components/schemas/fileSize'\n  jobID:\n    $ref: '#/components/schemas/jobID'\n  location:\n    $ref: '#/components/schemas/logLocation'\n  logID:\n    $ref: '#/components/schemas/logID'\n  logOutputLocation:\n    format: uri\n    type: string\n  orgID:\n    $ref: '#/components/schemas/orgID'\n  userID:\n    $ref: '#/components/schemas/userID'\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[2:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateLog(args[0], args[1], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listlogsforjob batchid jobid",
			Short:   "ListLogsForJob",
			Long:    cli.Markdown("List the logs associated with a given job"),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListLogsForJob(args[0], args[1], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "deletelog batchid jobid logid",
			Short:   "DeleteLog",
			Long:    cli.Markdown("Deletes a log."),
			Example: examples,
			Args:    cobra.MinimumNArgs(3),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiDeleteLog(args[0], args[1], args[2], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getlog batchid jobid logid",
			Short:   "GetLog",
			Long:    cli.Markdown("Get an individual log file"),
			Example: examples,
			Args:    cobra.MinimumNArgs(3),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetLog(args[0], args[1], args[2], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getjobmetrics batchid jobid",
			Short:   "GetJobMetrics",
			Long:    cli.Markdown("Retrieve the metrics json blob for the given job"),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetJobMetrics(args[0], args[1], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listbuilds",
			Short:   "ListBuilds",
			Long:    cli.Markdown("Returns the list of builds."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListBuilds(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")
		cmd.Flags().String("orderby", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getbuild buildid",
			Short:   "GetBuild",
			Long:    cli.Markdown("Returns a specific build."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetBuild(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listexperiencetags",
			Short:   "ListExperienceTags",
			Long:    cli.Markdown("Returns a list of all experience tags."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListExperienceTags(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")
		cmd.Flags().String("orderby", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createexperiencetag",
			Short:   "CreateExperienceTag",
			Long:    cli.Markdown("Adds an experience tag.  ID should be omitted and will be included in the response.\n## Request Schema (application/json)\n\nproperties:\n  creationTimestamp:\n    $ref: '#/components/schemas/creationTimestamp'\n  description:\n    type: string\n  experienceTagID:\n    $ref: '#/components/schemas/experienceTagID'\n  name:\n    type: string\n  orgID:\n    $ref: '#/components/schemas/orgID'\n  userID:\n    $ref: '#/components/schemas/userID'\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateExperienceTag(params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "deleteexperiencetag experiencetagid",
			Short:   "DeleteExperienceTag",
			Long:    cli.Markdown("Deletes an experience tag."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiDeleteExperienceTag(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getexperiencetag experiencetagid",
			Short:   "GetExperienceTag",
			Long:    cli.Markdown("Returns a specific experience tag."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetExperienceTag(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "updateexperiencetag experiencetagid",
			Short:   "UpdateExperienceTag",
			Long:    cli.Markdown("Updates the experience tag.  Experience membership cannot be changed with this method.\n## Request Schema (application/json)\n\nproperties:\n  experienceTag:\n    $ref: '#/components/schemas/experienceTag'\n  updateMask:\n    $ref: '#/components/schemas/updateMask'\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[1:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiUpdateExperienceTag(args[0], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listexperienceswithexperiencetag experiencetagid",
			Short:   "ListExperiencesWithExperienceTag",
			Long:    cli.Markdown("Returns a list of all experiences with the given experience tag."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListExperiencesWithExperienceTag(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "removeexperiencetagfromexperience experiencetagid experienceid",
			Short:   "RemoveExperienceTagFromExperience",
			Long:    cli.Markdown("Removes the given experience tag from the given experience."),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiRemoveExperienceTagFromExperience(args[0], args[1], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "addexperiencetagtoexperience experiencetagid experienceid",
			Short:   "AddExperienceTagToExperience",
			Long:    cli.Markdown("Adds the given experience tag to the given experience."),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("", args[2:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiAddExperienceTagToExperience(args[0], args[1], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listexperiences",
			Short:   "ListExperiences",
			Long:    cli.Markdown("Returns the list of experiences."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListExperiences(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")
		cmd.Flags().String("orderby", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createexperience",
			Short:   "CreateExperience",
			Long:    cli.Markdown("Adds an experience.  ID should be omitted and will be returned in the response.\n## Request Schema (application/json)\n\nproperties:\n  creationTimestamp:\n    $ref: '#/components/schemas/creationTimestamp'\n  description:\n    type: string\n  experienceID:\n    $ref: '#/components/schemas/experienceID'\n  location:\n    type: string\n  name:\n    type: string\n  orgID:\n    $ref: '#/components/schemas/orgID'\n  userID:\n    $ref: '#/components/schemas/userID'\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateExperience(params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "deleteexperience experienceid",
			Short:   "DeleteExperience",
			Long:    cli.Markdown("Deletes an experience."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiDeleteExperience(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getexperience experienceid",
			Short:   "GetExperience",
			Long:    cli.Markdown("Returns a specific experience."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetExperience(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "updateexperience experienceid",
			Short:   "UpdateExperience",
			Long:    cli.Markdown("Updates the experience.\n## Request Schema (application/json)\n\nproperties:\n  experience:\n    $ref: '#/components/schemas/experience'\n  updateMask:\n    $ref: '#/components/schemas/updateMask'\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[1:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiUpdateExperience(args[0], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listexperiencetagsforexperience experienceid",
			Short:   "ListExperienceTagsForExperience",
			Long:    cli.Markdown("Returns a list of experience tags associated with a given experience."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListExperienceTagsForExperience(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "health",
			Short:   "Health",
			Long:    cli.Markdown("Returns whether the service is healthy or not."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiHealth(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listprojects",
			Short:   "ListProjects",
			Long:    cli.Markdown("Returns the list of projects."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListProjects(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")
		cmd.Flags().String("orderby", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createproject",
			Short:   "CreateProject",
			Long:    cli.Markdown("Adds a project.  ID should be omitted and will be returned in the response.\n## Request Schema (application/json)\n\nproperties:\n  creationTimestamp:\n    $ref: '#/components/schemas/creationTimestamp'\n  description:\n    type: string\n  name:\n    type: string\n  orgID:\n    $ref: '#/components/schemas/orgID'\n  projectID:\n    $ref: '#/components/schemas/projectID'\n  userID:\n    $ref: '#/components/schemas/userID'\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateProject(params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "deleteproject projectid",
			Short:   "DeleteProject",
			Long:    cli.Markdown("Deletes a project."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiDeleteProject(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getproject projectid",
			Short:   "GetProject",
			Long:    cli.Markdown("Returns a specific project."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetProject(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "updateproject projectid",
			Short:   "UpdateProject",
			Long:    cli.Markdown("Updates the project.\n## Request Schema (application/json)\n\nproperties:\n  project:\n    $ref: '#/components/schemas/project'\n  updateMask:\n    $ref: '#/components/schemas/updateMask'\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[1:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiUpdateProject(args[0], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listbranchesforproject projectid",
			Short:   "ListBranchesForProject",
			Long:    cli.Markdown("Returns the list of branches for a project."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListBranchesForProject(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")
		cmd.Flags().String("orderby", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createbranchforproject projectid",
			Short:   "CreateBranchForProject",
			Long:    cli.Markdown("Adds a branch for a project.  ID should be omitted and will be returned in the response.\n## Request Schema (application/json)\n\nproperties:\n  branchID:\n    $ref: '#/components/schemas/branchID'\n  branchType:\n    $ref: '#/components/schemas/branchType'\n  creationTimestamp:\n    $ref: '#/components/schemas/creationTimestamp'\n  name:\n    type: string\n  orgID:\n    $ref: '#/components/schemas/orgID'\n  projectID:\n    $ref: '#/components/schemas/projectID'\n  userID:\n    $ref: '#/components/schemas/userID'\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[1:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateBranchForProject(args[0], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "deletebranchforproject projectid branchid",
			Short:   "DeleteBranchForProject",
			Long:    cli.Markdown("Deletes a branch for a project."),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiDeleteBranchForProject(args[0], args[1], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getbranchforproject projectid branchid",
			Short:   "GetBranchForProject",
			Long:    cli.Markdown("Returns a specific branch for a project."),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetBranchForProject(args[0], args[1], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listbuildsforbranch projectid branchid",
			Short:   "ListBuildsForBranch",
			Long:    cli.Markdown("Returns the list of builds for a branch."),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListBuildsForBranch(args[0], args[1], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")
		cmd.Flags().String("orderby", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createbuildforbranch projectid branchid",
			Short:   "CreateBuildForBranch",
			Long:    cli.Markdown("Adds a build.  ID should be omitted and will be returned in the response.\n## Request Schema (application/json)\n\nproperties:\n  branchID:\n    $ref: '#/components/schemas/branchID'\n  buildID:\n    $ref: '#/components/schemas/buildID'\n  creationTimestamp:\n    $ref: '#/components/schemas/creationTimestamp'\n  description:\n    $ref: '#/components/schemas/buildDescription'\n  imageName:\n    $ref: '#/components/schemas/buildImageName'\n  orgID:\n    $ref: '#/components/schemas/orgID'\n  userID:\n    $ref: '#/components/schemas/userID'\n  version:\n    $ref: '#/components/schemas/buildVersion'\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[2:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateBuildForBranch(args[0], args[1], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "deletebuildforbranch projectid branchid buildid",
			Short:   "DeleteBuildForBranch",
			Long:    cli.Markdown("Delete a build."),
			Example: examples,
			Args:    cobra.MinimumNArgs(3),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiDeleteBuildForBranch(args[0], args[1], args[2], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getbuildforbranch projectid branchid buildid",
			Short:   "GetBuildForBranch",
			Long:    cli.Markdown("Returns a specific build for a branch."),
			Example: examples,
			Args:    cobra.MinimumNArgs(3),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetBuildForBranch(args[0], args[1], args[2], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listbatchesforbuild projectid branchid buildid",
			Short:   "ListBatchesForBuild",
			Long:    cli.Markdown("Returns the batches for a build."),
			Example: examples,
			Args:    cobra.MinimumNArgs(3),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListBatchesForBuild(args[0], args[1], args[2], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")
		cmd.Flags().String("orderby", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "destroysandbox",
			Short:   "DestroySandbox",
			Long:    cli.Markdown("Destroys a sandbox environment.\n## Request Schema (application/json)\n\nproperties:\n  orgID:\n    type: string\n  userID:\n    type: string\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiDestroySandbox(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "setupsandbox",
			Short:   "SetupSandbox",
			Long:    cli.Markdown("Initializes a sandbox environment.\n## Request Schema (application/json)\n\nproperties:\n  orgID:\n    type: string\n  userID:\n    type: string\ntype: object\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/json", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiSetupSandbox(params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "listviewsessions",
			Short:   "ListViewSessions",
			Long:    cli.Markdown("Lists all View sessions."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiListViewSessions(params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cmd.Flags().Int64("pagesize", 0, "")
		cmd.Flags().String("pagetoken", "", "")
		cmd.Flags().String("orderby", "", "")

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createviewsession",
			Short:   "CreateViewSession",
			Long:    cli.Markdown("Creates a new View session."),
			Example: examples,
			Args:    cobra.MinimumNArgs(0),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("", args[0:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateViewSession(params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "getviewsession viewsessionid",
			Short:   "GetViewSession",
			Long:    cli.Markdown("Lists the view object and metadata associated with a specific view."),
			Example: examples,
			Args:    cobra.MinimumNArgs(1),
			Run: func(cmd *cobra.Command, args []string) {

				_, decoded, err := ApiGetViewSession(args[0], params)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

	func() {
		params := viper.New()

		var examples string

		cmd := &cobra.Command{
			Use:     "createviewupdate viewsessionid viewupdateid",
			Short:   "CreateViewUpdate",
			Long:    cli.Markdown("Adds an update to the View session.  Updates will be serialized sequentially by ID.\n## Request Schema (application/octet-stream)\n\nformat: binary\ntype: string\n"),
			Example: examples,
			Args:    cobra.MinimumNArgs(2),
			Run: func(cmd *cobra.Command, args []string) {
				body, err := cli.GetBody("application/octet-stream", args[2:])
				if err != nil {
					log.Fatal().Err(err).Msg("Unable to get body")
				}

				_, decoded, err := ApiCreateViewUpdate(args[0], args[1], params, body)
				if err != nil {
					log.Fatal().Err(err).Msg("Error calling operation")
				}

				if err := cli.Formatter.Format(decoded); err != nil {
					log.Fatal().Err(err).Msg("Formatting failed")
				}

			},
		}
		root.AddCommand(cmd)

		cli.SetCustomFlags(cmd)

		if cmd.Flags().HasFlags() {
			params.BindPFlags(cmd.Flags())
		}

	}()

}
